/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class LnrpcChannelFeeReport {
    /**
    * The short channel id that this fee report belongs to.
    */
    'chanId'?: string;
    /**
    * The channel that this fee report belongs to.
    */
    'channelPoint'?: string;
    /**
    * The base fee charged regardless of the number of milli-satoshis sent.
    */
    'baseFeeMsat'?: string;
    /**
    * The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
    */
    'feePerMil'?: string;
    /**
    * The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
    */
    'feeRate'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "chanId",
            "baseName": "chan_id",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "channelPoint",
            "baseName": "channel_point",
            "type": "string",
            "format": ""
        },
        {
            "name": "baseFeeMsat",
            "baseName": "base_fee_msat",
            "type": "string",
            "format": "int64"
        },
        {
            "name": "feePerMil",
            "baseName": "fee_per_mil",
            "type": "string",
            "format": "int64"
        },
        {
            "name": "feeRate",
            "baseName": "fee_rate",
            "type": "number",
            "format": "double"
        }    ];

    static getAttributeTypeMap() {
        return LnrpcChannelFeeReport.attributeTypeMap;
    }

    public constructor() {
    }
}

