/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class LnrpcChannelAcceptRequest {
    /**
    * The pubkey of the node that wishes to open an inbound channel.
    */
    'nodePubkey'?: string;
    /**
    * The hash of the genesis block that the proposed channel resides in.
    */
    'chainHash'?: string;
    /**
    * The pending channel id.
    */
    'pendingChanId'?: string;
    /**
    * The funding amount in satoshis that initiator wishes to use in the channel.
    */
    'fundingAmt'?: string;
    /**
    * The push amount of the proposed channel in millisatoshis.
    */
    'pushAmt'?: string;
    /**
    * The dust limit of the initiator's commitment tx.
    */
    'dustLimit'?: string;
    /**
    * The maximum amount of coins in millisatoshis that can be pending in this channel.
    */
    'maxValueInFlight'?: string;
    /**
    * The minimum amount of satoshis the initiator requires us to have at all times.
    */
    'channelReserve'?: string;
    /**
    * The smallest HTLC in millisatoshis that the initiator will accept.
    */
    'minHtlc'?: string;
    /**
    * The initial fee rate that the initiator suggests for both commitment transactions.
    */
    'feePerKw'?: string;
    /**
    * The number of blocks to use for the relative time lock in the pay-to-self output of both commitment transactions.
    */
    'csvDelay'?: number;
    /**
    * The total number of incoming HTLC's that the initiator will accept.
    */
    'maxAcceptedHtlcs'?: number;
    /**
    * A bit-field which the initiator uses to specify proposed channel behavior.
    */
    'channelFlags'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "nodePubkey",
            "baseName": "node_pubkey",
            "type": "string",
            "format": "byte"
        },
        {
            "name": "chainHash",
            "baseName": "chain_hash",
            "type": "string",
            "format": "byte"
        },
        {
            "name": "pendingChanId",
            "baseName": "pending_chan_id",
            "type": "string",
            "format": "byte"
        },
        {
            "name": "fundingAmt",
            "baseName": "funding_amt",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "pushAmt",
            "baseName": "push_amt",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "dustLimit",
            "baseName": "dust_limit",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "maxValueInFlight",
            "baseName": "max_value_in_flight",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "channelReserve",
            "baseName": "channel_reserve",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "minHtlc",
            "baseName": "min_htlc",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "feePerKw",
            "baseName": "fee_per_kw",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "csvDelay",
            "baseName": "csv_delay",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "maxAcceptedHtlcs",
            "baseName": "max_accepted_htlcs",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "channelFlags",
            "baseName": "channel_flags",
            "type": "number",
            "format": "int64"
        }    ];

    static getAttributeTypeMap() {
        return LnrpcChannelAcceptRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

