/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.lnd);
  }
}(this, function(expect, lnd) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new lnd.LnrpcGetInfoResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LnrpcGetInfoResponse', function() {
    it('should create an instance of LnrpcGetInfoResponse', function() {
      // uncomment below and update the code to test LnrpcGetInfoResponse
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be.a(lnd.LnrpcGetInfoResponse);
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property commitHash (base name: "commit_hash")', function() {
      // uncomment below and update the code to test the property commitHash
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property identityPubkey (base name: "identity_pubkey")', function() {
      // uncomment below and update the code to test the property identityPubkey
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property alias (base name: "alias")', function() {
      // uncomment below and update the code to test the property alias
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property numPendingChannels (base name: "num_pending_channels")', function() {
      // uncomment below and update the code to test the property numPendingChannels
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property numActiveChannels (base name: "num_active_channels")', function() {
      // uncomment below and update the code to test the property numActiveChannels
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property numInactiveChannels (base name: "num_inactive_channels")', function() {
      // uncomment below and update the code to test the property numInactiveChannels
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property numPeers (base name: "num_peers")', function() {
      // uncomment below and update the code to test the property numPeers
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property blockHeight (base name: "block_height")', function() {
      // uncomment below and update the code to test the property blockHeight
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property blockHash (base name: "block_hash")', function() {
      // uncomment below and update the code to test the property blockHash
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property bestHeaderTimestamp (base name: "best_header_timestamp")', function() {
      // uncomment below and update the code to test the property bestHeaderTimestamp
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property syncedToChain (base name: "synced_to_chain")', function() {
      // uncomment below and update the code to test the property syncedToChain
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property syncedToGraph (base name: "synced_to_graph")', function() {
      // uncomment below and update the code to test the property syncedToGraph
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property testnet (base name: "testnet")', function() {
      // uncomment below and update the code to test the property testnet
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property chains (base name: "chains")', function() {
      // uncomment below and update the code to test the property chains
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property uris (base name: "uris")', function() {
      // uncomment below and update the code to test the property uris
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new lnd.LnrpcGetInfoResponse();
      //expect(instance).to.be();
    });

  });

}));
