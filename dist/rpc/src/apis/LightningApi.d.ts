/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { LnrpcAddInvoiceResponse, LnrpcBakeMacaroonRequest, LnrpcBakeMacaroonResponse, LnrpcChanBackupSnapshot, LnrpcChannelAcceptResponse, LnrpcChannelBackup, LnrpcChannelBalanceResponse, LnrpcChannelEdge, LnrpcChannelGraph, LnrpcChannelPoint, LnrpcClosedChannelsResponse, LnrpcConnectPeerRequest, LnrpcDebugLevelRequest, LnrpcDebugLevelResponse, LnrpcDeleteMacaroonIDResponse, LnrpcEstimateFeeResponse, LnrpcFeeReportResponse, LnrpcForwardingHistoryRequest, LnrpcForwardingHistoryResponse, LnrpcFundingTransitionMsg, LnrpcGetInfoResponse, LnrpcGetRecoveryInfoResponse, LnrpcInvoice, LnrpcListChannelsResponse, LnrpcListInvoiceResponse, LnrpcListMacaroonIDsResponse, LnrpcListPaymentsResponse, LnrpcListPeersResponse, LnrpcListPermissionsResponse, LnrpcListUnspentResponse, LnrpcNetworkInfo, LnrpcNewAddressResponse, LnrpcNodeInfo, LnrpcNodeMetricsResponse, LnrpcOpenChannelRequest, LnrpcPayReq, LnrpcPendingChannelsResponse, LnrpcPolicyUpdateRequest, LnrpcQueryRoutesResponse, LnrpcRestoreChanBackupRequest, LnrpcSendCoinsRequest, LnrpcSendCoinsResponse, LnrpcSendManyRequest, LnrpcSendManyResponse, LnrpcSendRequest, LnrpcSendResponse, LnrpcSendToRouteRequest, LnrpcSignMessageRequest, LnrpcSignMessageResponse, LnrpcTransactionDetails, LnrpcVerifyMessageRequest, LnrpcVerifyMessageResponse, LnrpcWalletBalanceResponse, StreamResultOfLnrpcChanBackupSnapshot, StreamResultOfLnrpcChannelAcceptRequest, StreamResultOfLnrpcChannelEventUpdate, StreamResultOfLnrpcCloseStatusUpdate, StreamResultOfLnrpcGraphTopologyUpdate, StreamResultOfLnrpcInvoice, StreamResultOfLnrpcOpenStatusUpdate, StreamResultOfLnrpcPeerEvent, StreamResultOfLnrpcSendResponse, StreamResultOfLnrpcTransaction } from '../models';
export interface AbandonChannelRequest {
    channel_point_funding_txid_str: string;
    channel_point_output_index: number;
    channel_point_funding_txid_bytes?: string;
    pending_funding_shim_only?: boolean;
    i_know_what_i_am_doing?: boolean;
}
export interface AddInvoiceRequest {
    body: LnrpcInvoice;
}
export interface BakeMacaroonRequest {
    body: LnrpcBakeMacaroonRequest;
}
export interface ChannelAcceptorRequest {
    body: LnrpcChannelAcceptResponse;
}
export interface CloseChannelRequest {
    channel_point_funding_txid_str: string;
    channel_point_output_index: number;
    channel_point_funding_txid_bytes?: string;
    force?: boolean;
    target_conf?: number;
    sat_per_byte?: string;
    delivery_address?: string;
    sat_per_vbyte?: string;
}
export interface ClosedChannelsRequest {
    cooperative?: boolean;
    local_force?: boolean;
    remote_force?: boolean;
    breach?: boolean;
    funding_canceled?: boolean;
    abandoned?: boolean;
}
export interface ConnectPeerRequest {
    body: LnrpcConnectPeerRequest;
}
export interface DebugLevelRequest {
    body: LnrpcDebugLevelRequest;
}
export interface DecodePayReqRequest {
    pay_req: string;
}
export interface DeleteAllPaymentsRequest {
    failed_payments_only?: boolean;
    failed_htlcs_only?: boolean;
}
export interface DeleteMacaroonIDRequest {
    root_key_id: string;
}
export interface DescribeGraphRequest {
    include_unannounced?: boolean;
}
export interface DisconnectPeerRequest {
    pub_key: string;
}
export interface EstimateFeeRequest {
    target_conf?: number;
    min_confs?: number;
    spend_unconfirmed?: boolean;
}
export interface ExportChannelBackupRequest {
    chan_point_funding_txid_str: string;
    chan_point_output_index: number;
    chan_point_funding_txid_bytes?: string;
}
export interface ForwardingHistoryRequest {
    body: LnrpcForwardingHistoryRequest;
}
export interface FundingStateStepRequest {
    body: LnrpcFundingTransitionMsg;
}
export interface GetChanInfoRequest {
    chan_id: string;
}
export interface GetNodeInfoRequest {
    pub_key: string;
    include_channels?: boolean;
}
export interface GetNodeMetricsRequest {
    types?: Array<GetNodeMetricsTypesEnum>;
}
export interface GetTransactionsRequest {
    start_height?: number;
    end_height?: number;
    account?: string;
}
export interface ListChannelsRequest {
    active_only?: boolean;
    inactive_only?: boolean;
    public_only?: boolean;
    private_only?: boolean;
    peer?: string;
}
export interface ListInvoicesRequest {
    pending_only?: boolean;
    index_offset?: string;
    num_max_invoices?: string;
    reversed?: boolean;
}
export interface ListPaymentsRequest {
    include_incomplete?: boolean;
    index_offset?: string;
    max_payments?: string;
    reversed?: boolean;
}
export interface ListPeersRequest {
    latest_error?: boolean;
}
export interface ListUnspentRequest {
    min_confs?: number;
    max_confs?: number;
    account?: string;
}
export interface LookupInvoiceRequest {
    r_hash_str: string;
    r_hash?: string;
}
export interface NewAddressRequest {
    type?: NewAddressTypeEnum;
    account?: string;
}
export interface OpenChannelRequest {
    body: LnrpcOpenChannelRequest;
}
export interface OpenChannelSyncRequest {
    body: LnrpcOpenChannelRequest;
}
export interface QueryRoutesRequest {
    pub_key: string;
    amt: string;
    amt_msat?: string;
    final_cltv_delta?: number;
    fee_limit_fixed?: string;
    fee_limit_fixed_msat?: string;
    fee_limit_percent?: string;
    ignored_nodes?: Array<string>;
    source_pub_key?: string;
    use_mission_control?: boolean;
    cltv_limit?: number;
    outgoing_chan_id?: string;
    last_hop_pubkey?: string;
    dest_features?: Array<QueryRoutesDestFeaturesEnum>;
}
export interface RestoreChannelBackupsRequest {
    body: LnrpcRestoreChanBackupRequest;
}
export interface SendCoinsRequest {
    body: LnrpcSendCoinsRequest;
}
export interface SendManyRequest {
    body: LnrpcSendManyRequest;
}
export interface SendPaymentRequest {
    body: LnrpcSendRequest;
}
export interface SendPaymentSyncRequest {
    body: LnrpcSendRequest;
}
export interface SendToRouteSyncRequest {
    body: LnrpcSendToRouteRequest;
}
export interface SignMessageRequest {
    body: LnrpcSignMessageRequest;
}
export interface StopDaemonRequest {
    body: object;
}
export interface SubscribeInvoicesRequest {
    add_index?: string;
    settle_index?: string;
}
export interface SubscribeTransactionsRequest {
    start_height?: number;
    end_height?: number;
    account?: string;
}
export interface UpdateChannelPolicyRequest {
    body: LnrpcPolicyUpdateRequest;
}
export interface VerifyChanBackupRequest {
    body: LnrpcChanBackupSnapshot;
}
export interface VerifyMessageRequest {
    body: LnrpcVerifyMessageRequest;
}
/**
 *
 */
export declare class LightningApi extends runtime.BaseAPI {
    /**
     * lncli: `abandonchannel` AbandonChannel removes all channel state from the database except for a close summary. This method can be used to get rid of permanently unusable channels due to bugs fixed in newer versions of lnd. This method can also be used to remove externally funded channels where the funding transaction was never broadcast. Only available for non-externally funded channels in dev build.
     */
    abandonChannelRaw(requestParameters: AbandonChannelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * lncli: `abandonchannel` AbandonChannel removes all channel state from the database except for a close summary. This method can be used to get rid of permanently unusable channels due to bugs fixed in newer versions of lnd. This method can also be used to remove externally funded channels where the funding transaction was never broadcast. Only available for non-externally funded channels in dev build.
     */
    abandonChannel(requestParameters: AbandonChannelRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * lncli: `addinvoice` AddInvoice attempts to add a new invoice to the invoice database. Any duplicated invoices are rejected, therefore all invoices *must* have a unique payment preimage.
     */
    addInvoiceRaw(requestParameters: AddInvoiceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcAddInvoiceResponse>>;
    /**
     * lncli: `addinvoice` AddInvoice attempts to add a new invoice to the invoice database. Any duplicated invoices are rejected, therefore all invoices *must* have a unique payment preimage.
     */
    addInvoice(requestParameters: AddInvoiceRequest, initOverrides?: RequestInit): Promise<LnrpcAddInvoiceResponse>;
    /**
     * lncli: `bakemacaroon` BakeMacaroon allows the creation of a new macaroon with custom read and write permissions. No first-party caveats are added since this can be done offline.
     */
    bakeMacaroonRaw(requestParameters: BakeMacaroonRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcBakeMacaroonResponse>>;
    /**
     * lncli: `bakemacaroon` BakeMacaroon allows the creation of a new macaroon with custom read and write permissions. No first-party caveats are added since this can be done offline.
     */
    bakeMacaroon(requestParameters: BakeMacaroonRequest, initOverrides?: RequestInit): Promise<LnrpcBakeMacaroonResponse>;
    /**
     * ChannelAcceptor dispatches a bi-directional streaming RPC in which OpenChannel requests are sent to the client and the client responds with a boolean that tells LND whether or not to accept the channel. This allows node operators to specify their own criteria for accepting inbound channels through a single persistent connection.
     */
    channelAcceptorRaw(requestParameters: ChannelAcceptorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcChannelAcceptRequest>>;
    /**
     * ChannelAcceptor dispatches a bi-directional streaming RPC in which OpenChannel requests are sent to the client and the client responds with a boolean that tells LND whether or not to accept the channel. This allows node operators to specify their own criteria for accepting inbound channels through a single persistent connection.
     */
    channelAcceptor(requestParameters: ChannelAcceptorRequest, initOverrides?: RequestInit): Promise<StreamResultOfLnrpcChannelAcceptRequest>;
    /**
     * lncli: `channelbalance` ChannelBalance returns a report on the total funds across all open channels, categorized in local/remote, pending local/remote and unsettled local/remote balances.
     */
    channelBalanceRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcChannelBalanceResponse>>;
    /**
     * lncli: `channelbalance` ChannelBalance returns a report on the total funds across all open channels, categorized in local/remote, pending local/remote and unsettled local/remote balances.
     */
    channelBalance(initOverrides?: RequestInit): Promise<LnrpcChannelBalanceResponse>;
    /**
     * lncli: `closechannel` CloseChannel attempts to close an active channel identified by its channel outpoint (ChannelPoint). The actions of this method can additionally be augmented to attempt a force close after a timeout period in the case of an inactive peer. If a non-force close (cooperative closure) is requested, then the user can specify either a target number of blocks until the closure transaction is confirmed, or a manual fee rate. If neither are specified, then a default lax, block confirmation target is used.
     */
    closeChannelRaw(requestParameters: CloseChannelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcCloseStatusUpdate>>;
    /**
     * lncli: `closechannel` CloseChannel attempts to close an active channel identified by its channel outpoint (ChannelPoint). The actions of this method can additionally be augmented to attempt a force close after a timeout period in the case of an inactive peer. If a non-force close (cooperative closure) is requested, then the user can specify either a target number of blocks until the closure transaction is confirmed, or a manual fee rate. If neither are specified, then a default lax, block confirmation target is used.
     */
    closeChannel(requestParameters: CloseChannelRequest, initOverrides?: RequestInit): Promise<StreamResultOfLnrpcCloseStatusUpdate>;
    /**
     * lncli: `closedchannels` ClosedChannels returns a description of all the closed channels that this node was a participant in.
     */
    closedChannelsRaw(requestParameters: ClosedChannelsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcClosedChannelsResponse>>;
    /**
     * lncli: `closedchannels` ClosedChannels returns a description of all the closed channels that this node was a participant in.
     */
    closedChannels(requestParameters: ClosedChannelsRequest, initOverrides?: RequestInit): Promise<LnrpcClosedChannelsResponse>;
    /**
     * lncli: `connect` ConnectPeer attempts to establish a connection to a remote peer. This is at the networking level, and is used for communication between nodes. This is distinct from establishing a channel with a peer.
     */
    connectPeerRaw(requestParameters: ConnectPeerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * lncli: `connect` ConnectPeer attempts to establish a connection to a remote peer. This is at the networking level, and is used for communication between nodes. This is distinct from establishing a channel with a peer.
     */
    connectPeer(requestParameters: ConnectPeerRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * lncli: `debuglevel` DebugLevel allows a caller to programmatically set the logging verbosity of lnd. The logging can be targeted according to a coarse daemon-wide logging level, or in a granular fashion to specify the logging for a target sub-system.
     */
    debugLevelRaw(requestParameters: DebugLevelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcDebugLevelResponse>>;
    /**
     * lncli: `debuglevel` DebugLevel allows a caller to programmatically set the logging verbosity of lnd. The logging can be targeted according to a coarse daemon-wide logging level, or in a granular fashion to specify the logging for a target sub-system.
     */
    debugLevel(requestParameters: DebugLevelRequest, initOverrides?: RequestInit): Promise<LnrpcDebugLevelResponse>;
    /**
     * lncli: `decodepayreq` DecodePayReq takes an encoded payment request string and attempts to decode it, returning a full description of the conditions encoded within the payment request.
     */
    decodePayReqRaw(requestParameters: DecodePayReqRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcPayReq>>;
    /**
     * lncli: `decodepayreq` DecodePayReq takes an encoded payment request string and attempts to decode it, returning a full description of the conditions encoded within the payment request.
     */
    decodePayReq(requestParameters: DecodePayReqRequest, initOverrides?: RequestInit): Promise<LnrpcPayReq>;
    /**
     * DeleteAllPayments deletes all outgoing payments from DB.
     */
    deleteAllPaymentsRaw(requestParameters: DeleteAllPaymentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * DeleteAllPayments deletes all outgoing payments from DB.
     */
    deleteAllPayments(requestParameters: DeleteAllPaymentsRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * lncli: `deletemacaroonid` DeleteMacaroonID deletes the specified macaroon ID and invalidates all macaroons derived from that ID.
     */
    deleteMacaroonIDRaw(requestParameters: DeleteMacaroonIDRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcDeleteMacaroonIDResponse>>;
    /**
     * lncli: `deletemacaroonid` DeleteMacaroonID deletes the specified macaroon ID and invalidates all macaroons derived from that ID.
     */
    deleteMacaroonID(requestParameters: DeleteMacaroonIDRequest, initOverrides?: RequestInit): Promise<LnrpcDeleteMacaroonIDResponse>;
    /**
     * lncli: `describegraph` DescribeGraph returns a description of the latest graph state from the point of view of the node. The graph information is partitioned into two components: all the nodes/vertexes, and all the edges that connect the vertexes themselves. As this is a directed graph, the edges also contain the node directional specific routing policy which includes: the time lock delta, fee information, etc.
     */
    describeGraphRaw(requestParameters: DescribeGraphRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcChannelGraph>>;
    /**
     * lncli: `describegraph` DescribeGraph returns a description of the latest graph state from the point of view of the node. The graph information is partitioned into two components: all the nodes/vertexes, and all the edges that connect the vertexes themselves. As this is a directed graph, the edges also contain the node directional specific routing policy which includes: the time lock delta, fee information, etc.
     */
    describeGraph(requestParameters: DescribeGraphRequest, initOverrides?: RequestInit): Promise<LnrpcChannelGraph>;
    /**
     * lncli: `disconnect` DisconnectPeer attempts to disconnect one peer from another identified by a given pubKey. In the case that we currently have a pending or active channel with the target peer, then this action will be not be allowed.
     */
    disconnectPeerRaw(requestParameters: DisconnectPeerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * lncli: `disconnect` DisconnectPeer attempts to disconnect one peer from another identified by a given pubKey. In the case that we currently have a pending or active channel with the target peer, then this action will be not be allowed.
     */
    disconnectPeer(requestParameters: DisconnectPeerRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * When using REST, the `AddrToAmount` map type can be set by appending `&AddrToAmount[<address>]=<amount_to_send>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `estimatefee` EstimateFee asks the chain backend to estimate the fee rate and total fees for a transaction that pays to multiple specified outputs.
     */
    estimateFeeRaw(requestParameters: EstimateFeeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcEstimateFeeResponse>>;
    /**
     * When using REST, the `AddrToAmount` map type can be set by appending `&AddrToAmount[<address>]=<amount_to_send>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `estimatefee` EstimateFee asks the chain backend to estimate the fee rate and total fees for a transaction that pays to multiple specified outputs.
     */
    estimateFee(requestParameters: EstimateFeeRequest, initOverrides?: RequestInit): Promise<LnrpcEstimateFeeResponse>;
    /**
     * ExportAllChannelBackups returns static channel backups for all existing channels known to lnd. A set of regular singular static channel backups for each channel are returned. Additionally, a multi-channel backup is returned as well, which contains a single encrypted blob containing the backups of each channel.
     */
    exportAllChannelBackupsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcChanBackupSnapshot>>;
    /**
     * ExportAllChannelBackups returns static channel backups for all existing channels known to lnd. A set of regular singular static channel backups for each channel are returned. Additionally, a multi-channel backup is returned as well, which contains a single encrypted blob containing the backups of each channel.
     */
    exportAllChannelBackups(initOverrides?: RequestInit): Promise<LnrpcChanBackupSnapshot>;
    /**
     * lncli: `exportchanbackup` ExportChannelBackup attempts to return an encrypted static channel backup for the target channel identified by it channel point. The backup is encrypted with a key generated from the aezeed seed of the user. The returned backup can either be restored using the RestoreChannelBackup method once lnd is running, or via the InitWallet and UnlockWallet methods from the WalletUnlocker service.
     */
    exportChannelBackupRaw(requestParameters: ExportChannelBackupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcChannelBackup>>;
    /**
     * lncli: `exportchanbackup` ExportChannelBackup attempts to return an encrypted static channel backup for the target channel identified by it channel point. The backup is encrypted with a key generated from the aezeed seed of the user. The returned backup can either be restored using the RestoreChannelBackup method once lnd is running, or via the InitWallet and UnlockWallet methods from the WalletUnlocker service.
     */
    exportChannelBackup(requestParameters: ExportChannelBackupRequest, initOverrides?: RequestInit): Promise<LnrpcChannelBackup>;
    /**
     * lncli: `feereport` FeeReport allows the caller to obtain a report detailing the current fee schedule enforced by the node globally for each channel.
     */
    feeReportRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcFeeReportResponse>>;
    /**
     * lncli: `feereport` FeeReport allows the caller to obtain a report detailing the current fee schedule enforced by the node globally for each channel.
     */
    feeReport(initOverrides?: RequestInit): Promise<LnrpcFeeReportResponse>;
    /**
     * A list of forwarding events are returned. The size of each forwarding event is 40 bytes, and the max message size able to be returned in gRPC is 4 MiB. As a result each message can only contain 50k entries. Each response has the index offset of the last entry. The index offset can be provided to the request to allow the caller to skip a series of records.
     * lncli: `fwdinghistory` ForwardingHistory allows the caller to query the htlcswitch for a record of all HTLCs forwarded within the target time range, and integer offset within that time range, for a maximum number of events. If no maximum number of events is specified, up to 100 events will be returned. If no time-range is specified, then events will be returned in the order that they occured.
     */
    forwardingHistoryRaw(requestParameters: ForwardingHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcForwardingHistoryResponse>>;
    /**
     * A list of forwarding events are returned. The size of each forwarding event is 40 bytes, and the max message size able to be returned in gRPC is 4 MiB. As a result each message can only contain 50k entries. Each response has the index offset of the last entry. The index offset can be provided to the request to allow the caller to skip a series of records.
     * lncli: `fwdinghistory` ForwardingHistory allows the caller to query the htlcswitch for a record of all HTLCs forwarded within the target time range, and integer offset within that time range, for a maximum number of events. If no maximum number of events is specified, up to 100 events will be returned. If no time-range is specified, then events will be returned in the order that they occured.
     */
    forwardingHistory(requestParameters: ForwardingHistoryRequest, initOverrides?: RequestInit): Promise<LnrpcForwardingHistoryResponse>;
    /**
     * FundingStateStep is an advanced funding related call that allows the caller to either execute some preparatory steps for a funding workflow, or manually progress a funding workflow. The primary way a funding flow is identified is via its pending channel ID. As an example, this method can be used to specify that we\'re expecting a funding flow for a particular pending channel ID, for which we need to use specific parameters. Alternatively, this can be used to interactively drive PSBT signing for funding for partially complete funding transactions.
     */
    fundingStateStepRaw(requestParameters: FundingStateStepRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * FundingStateStep is an advanced funding related call that allows the caller to either execute some preparatory steps for a funding workflow, or manually progress a funding workflow. The primary way a funding flow is identified is via its pending channel ID. As an example, this method can be used to specify that we\'re expecting a funding flow for a particular pending channel ID, for which we need to use specific parameters. Alternatively, this can be used to interactively drive PSBT signing for funding for partially complete funding transactions.
     */
    fundingStateStep(requestParameters: FundingStateStepRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * lncli: `getchaninfo` GetChanInfo returns the latest authenticated network announcement for the given channel identified by its channel ID: an 8-byte integer which uniquely identifies the location of transaction\'s funding output within the blockchain.
     */
    getChanInfoRaw(requestParameters: GetChanInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcChannelEdge>>;
    /**
     * lncli: `getchaninfo` GetChanInfo returns the latest authenticated network announcement for the given channel identified by its channel ID: an 8-byte integer which uniquely identifies the location of transaction\'s funding output within the blockchain.
     */
    getChanInfo(requestParameters: GetChanInfoRequest, initOverrides?: RequestInit): Promise<LnrpcChannelEdge>;
    /**
     * lncli: `getinfo` GetInfo returns general information concerning the lightning node including it\'s identity pubkey, alias, the chains it is connected to, and information concerning the number of open+pending channels.
     */
    getInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcGetInfoResponse>>;
    /**
     * lncli: `getinfo` GetInfo returns general information concerning the lightning node including it\'s identity pubkey, alias, the chains it is connected to, and information concerning the number of open+pending channels.
     */
    getInfo(initOverrides?: RequestInit): Promise<LnrpcGetInfoResponse>;
    /**
     * lncli: `getnetworkinfo` GetNetworkInfo returns some basic stats about the known channel graph from the point of view of the node.
     */
    getNetworkInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcNetworkInfo>>;
    /**
     * lncli: `getnetworkinfo` GetNetworkInfo returns some basic stats about the known channel graph from the point of view of the node.
     */
    getNetworkInfo(initOverrides?: RequestInit): Promise<LnrpcNetworkInfo>;
    /**
     * lncli: `getnodeinfo` GetNodeInfo returns the latest advertised, aggregated, and authenticated channel information for the specified node identified by its public key.
     */
    getNodeInfoRaw(requestParameters: GetNodeInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcNodeInfo>>;
    /**
     * lncli: `getnodeinfo` GetNodeInfo returns the latest advertised, aggregated, and authenticated channel information for the specified node identified by its public key.
     */
    getNodeInfo(requestParameters: GetNodeInfoRequest, initOverrides?: RequestInit): Promise<LnrpcNodeInfo>;
    /**
     * lncli: `getnodemetrics` GetNodeMetrics returns node metrics calculated from the graph. Currently the only supported metric is betweenness centrality of individual nodes.
     */
    getNodeMetricsRaw(requestParameters: GetNodeMetricsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcNodeMetricsResponse>>;
    /**
     * lncli: `getnodemetrics` GetNodeMetrics returns node metrics calculated from the graph. Currently the only supported metric is betweenness centrality of individual nodes.
     */
    getNodeMetrics(requestParameters: GetNodeMetricsRequest, initOverrides?: RequestInit): Promise<LnrpcNodeMetricsResponse>;
    /**
     * * lncli: `getrecoveryinfo` GetRecoveryInfo returns information concerning the recovery mode including whether it\'s in a recovery mode, whether the recovery is finished, and the progress made so far.
     */
    getRecoveryInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcGetRecoveryInfoResponse>>;
    /**
     * * lncli: `getrecoveryinfo` GetRecoveryInfo returns information concerning the recovery mode including whether it\'s in a recovery mode, whether the recovery is finished, and the progress made so far.
     */
    getRecoveryInfo(initOverrides?: RequestInit): Promise<LnrpcGetRecoveryInfoResponse>;
    /**
     * lncli: `listchaintxns` GetTransactions returns a list describing all the known transactions relevant to the wallet.
     */
    getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcTransactionDetails>>;
    /**
     * lncli: `listchaintxns` GetTransactions returns a list describing all the known transactions relevant to the wallet.
     */
    getTransactions(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit): Promise<LnrpcTransactionDetails>;
    /**
     * lncli: `listchannels` ListChannels returns a description of all the open channels that this node is a participant in.
     */
    listChannelsRaw(requestParameters: ListChannelsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListChannelsResponse>>;
    /**
     * lncli: `listchannels` ListChannels returns a description of all the open channels that this node is a participant in.
     */
    listChannels(requestParameters: ListChannelsRequest, initOverrides?: RequestInit): Promise<LnrpcListChannelsResponse>;
    /**
     * lncli: `listinvoices` ListInvoices returns a list of all the invoices currently stored within the database. Any active debug invoices are ignored. It has full support for paginated responses, allowing users to query for specific invoices through their add_index. This can be done by using either the first_index_offset or last_index_offset fields included in the response as the index_offset of the next request. By default, the first 100 invoices created will be returned. Backwards pagination is also supported through the Reversed flag.
     */
    listInvoicesRaw(requestParameters: ListInvoicesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListInvoiceResponse>>;
    /**
     * lncli: `listinvoices` ListInvoices returns a list of all the invoices currently stored within the database. Any active debug invoices are ignored. It has full support for paginated responses, allowing users to query for specific invoices through their add_index. This can be done by using either the first_index_offset or last_index_offset fields included in the response as the index_offset of the next request. By default, the first 100 invoices created will be returned. Backwards pagination is also supported through the Reversed flag.
     */
    listInvoices(requestParameters: ListInvoicesRequest, initOverrides?: RequestInit): Promise<LnrpcListInvoiceResponse>;
    /**
     * lncli: `listmacaroonids` ListMacaroonIDs returns all root key IDs that are in use.
     */
    listMacaroonIDsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListMacaroonIDsResponse>>;
    /**
     * lncli: `listmacaroonids` ListMacaroonIDs returns all root key IDs that are in use.
     */
    listMacaroonIDs(initOverrides?: RequestInit): Promise<LnrpcListMacaroonIDsResponse>;
    /**
     * lncli: `listpayments` ListPayments returns a list of all outgoing payments.
     */
    listPaymentsRaw(requestParameters: ListPaymentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListPaymentsResponse>>;
    /**
     * lncli: `listpayments` ListPayments returns a list of all outgoing payments.
     */
    listPayments(requestParameters: ListPaymentsRequest, initOverrides?: RequestInit): Promise<LnrpcListPaymentsResponse>;
    /**
     * lncli: `listpeers` ListPeers returns a verbose listing of all currently active peers.
     */
    listPeersRaw(requestParameters: ListPeersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListPeersResponse>>;
    /**
     * lncli: `listpeers` ListPeers returns a verbose listing of all currently active peers.
     */
    listPeers(requestParameters: ListPeersRequest, initOverrides?: RequestInit): Promise<LnrpcListPeersResponse>;
    /**
     * lncli: `listpermissions` ListPermissions lists all RPC method URIs and their required macaroon permissions to access them.
     */
    listPermissionsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListPermissionsResponse>>;
    /**
     * lncli: `listpermissions` ListPermissions lists all RPC method URIs and their required macaroon permissions to access them.
     */
    listPermissions(initOverrides?: RequestInit): Promise<LnrpcListPermissionsResponse>;
    /**
     * ListUnspent returns a list of all utxos spendable by the wallet with a number of confirmations between the specified minimum and maximum.
     * lncli: `listunspent` Deprecated, use walletrpc.ListUnspent instead.
     */
    listUnspentRaw(requestParameters: ListUnspentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcListUnspentResponse>>;
    /**
     * ListUnspent returns a list of all utxos spendable by the wallet with a number of confirmations between the specified minimum and maximum.
     * lncli: `listunspent` Deprecated, use walletrpc.ListUnspent instead.
     */
    listUnspent(requestParameters: ListUnspentRequest, initOverrides?: RequestInit): Promise<LnrpcListUnspentResponse>;
    /**
     * lncli: `lookupinvoice` LookupInvoice attempts to look up an invoice according to its payment hash. The passed payment hash *must* be exactly 32 bytes, if not, an error is returned.
     */
    lookupInvoiceRaw(requestParameters: LookupInvoiceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcInvoice>>;
    /**
     * lncli: `lookupinvoice` LookupInvoice attempts to look up an invoice according to its payment hash. The passed payment hash *must* be exactly 32 bytes, if not, an error is returned.
     */
    lookupInvoice(requestParameters: LookupInvoiceRequest, initOverrides?: RequestInit): Promise<LnrpcInvoice>;
    /**
     * lncli: `newaddress` NewAddress creates a new address under control of the local wallet.
     */
    newAddressRaw(requestParameters: NewAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcNewAddressResponse>>;
    /**
     * lncli: `newaddress` NewAddress creates a new address under control of the local wallet.
     */
    newAddress(requestParameters: NewAddressRequest, initOverrides?: RequestInit): Promise<LnrpcNewAddressResponse>;
    /**
     * lncli: `openchannel` OpenChannel attempts to open a singly funded channel specified in the request to a remote peer. Users are able to specify a target number of blocks that the funding transaction should be confirmed in, or a manual fee rate to us for the funding transaction. If neither are specified, then a lax block confirmation target is used. Each OpenStatusUpdate will return the pending channel ID of the in-progress channel. Depending on the arguments specified in the OpenChannelRequest, this pending channel ID can then be used to manually progress the channel funding flow.
     */
    openChannelRaw(requestParameters: OpenChannelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcOpenStatusUpdate>>;
    /**
     * lncli: `openchannel` OpenChannel attempts to open a singly funded channel specified in the request to a remote peer. Users are able to specify a target number of blocks that the funding transaction should be confirmed in, or a manual fee rate to us for the funding transaction. If neither are specified, then a lax block confirmation target is used. Each OpenStatusUpdate will return the pending channel ID of the in-progress channel. Depending on the arguments specified in the OpenChannelRequest, this pending channel ID can then be used to manually progress the channel funding flow.
     */
    openChannel(requestParameters: OpenChannelRequest, initOverrides?: RequestInit): Promise<StreamResultOfLnrpcOpenStatusUpdate>;
    /**
     * OpenChannelSync is a synchronous version of the OpenChannel RPC call. This call is meant to be consumed by clients to the REST proxy. As with all other sync calls, all byte slices are intended to be populated as hex encoded strings.
     */
    openChannelSyncRaw(requestParameters: OpenChannelSyncRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcChannelPoint>>;
    /**
     * OpenChannelSync is a synchronous version of the OpenChannel RPC call. This call is meant to be consumed by clients to the REST proxy. As with all other sync calls, all byte slices are intended to be populated as hex encoded strings.
     */
    openChannelSync(requestParameters: OpenChannelSyncRequest, initOverrides?: RequestInit): Promise<LnrpcChannelPoint>;
    /**
     * lncli: `pendingchannels` PendingChannels returns a list of all the channels that are currently considered \"pending\". A channel is pending if it has finished the funding workflow and is waiting for confirmations for the funding txn, or is in the process of closure, either initiated cooperatively or non-cooperatively.
     */
    pendingChannelsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcPendingChannelsResponse>>;
    /**
     * lncli: `pendingchannels` PendingChannels returns a list of all the channels that are currently considered \"pending\". A channel is pending if it has finished the funding workflow and is waiting for confirmations for the funding txn, or is in the process of closure, either initiated cooperatively or non-cooperatively.
     */
    pendingChannels(initOverrides?: RequestInit): Promise<LnrpcPendingChannelsResponse>;
    /**
     * When using REST, the `dest_custom_records` map type can be set by appending `&dest_custom_records[<record_number>]=<record_data_base64_url_encoded>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `queryroutes` QueryRoutes attempts to query the daemon\'s Channel Router for a possible route to a target destination capable of carrying a specific amount of satoshis. The returned route contains the full details required to craft and send an HTLC, also including the necessary information that should be present within the Sphinx packet encapsulated within the HTLC.
     */
    queryRoutesRaw(requestParameters: QueryRoutesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcQueryRoutesResponse>>;
    /**
     * When using REST, the `dest_custom_records` map type can be set by appending `&dest_custom_records[<record_number>]=<record_data_base64_url_encoded>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `queryroutes` QueryRoutes attempts to query the daemon\'s Channel Router for a possible route to a target destination capable of carrying a specific amount of satoshis. The returned route contains the full details required to craft and send an HTLC, also including the necessary information that should be present within the Sphinx packet encapsulated within the HTLC.
     */
    queryRoutes(requestParameters: QueryRoutesRequest, initOverrides?: RequestInit): Promise<LnrpcQueryRoutesResponse>;
    /**
     * lncli: `restorechanbackup` RestoreChannelBackups accepts a set of singular channel backups, or a single encrypted multi-chan backup and attempts to recover any funds remaining within the channel. If we are able to unpack the backup, then the new channel will be shown under listchannels, as well as pending channels.
     */
    restoreChannelBackupsRaw(requestParameters: RestoreChannelBackupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * lncli: `restorechanbackup` RestoreChannelBackups accepts a set of singular channel backups, or a single encrypted multi-chan backup and attempts to recover any funds remaining within the channel. If we are able to unpack the backup, then the new channel will be shown under listchannels, as well as pending channels.
     */
    restoreChannelBackups(requestParameters: RestoreChannelBackupsRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * lncli: `sendcoins` SendCoins executes a request to send coins to a particular address. Unlike SendMany, this RPC call only allows creating a single output at a time. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendCoinsRaw(requestParameters: SendCoinsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcSendCoinsResponse>>;
    /**
     * lncli: `sendcoins` SendCoins executes a request to send coins to a particular address. Unlike SendMany, this RPC call only allows creating a single output at a time. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendCoins(requestParameters: SendCoinsRequest, initOverrides?: RequestInit): Promise<LnrpcSendCoinsResponse>;
    /**
     * lncli: `sendmany` SendMany handles a request for a transaction that creates multiple specified outputs in parallel. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendManyRaw(requestParameters: SendManyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcSendManyResponse>>;
    /**
     * lncli: `sendmany` SendMany handles a request for a transaction that creates multiple specified outputs in parallel. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendMany(requestParameters: SendManyRequest, initOverrides?: RequestInit): Promise<LnrpcSendManyResponse>;
    /**
     * lncli: `sendpayment` Deprecated, use routerrpc.SendPaymentV2. SendPayment dispatches a bi-directional streaming RPC for sending payments through the Lightning Network. A single RPC invocation creates a persistent bi-directional stream allowing clients to rapidly send payments through the Lightning Network with a single persistent connection.
     */
    sendPaymentRaw(requestParameters: SendPaymentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcSendResponse>>;
    /**
     * lncli: `sendpayment` Deprecated, use routerrpc.SendPaymentV2. SendPayment dispatches a bi-directional streaming RPC for sending payments through the Lightning Network. A single RPC invocation creates a persistent bi-directional stream allowing clients to rapidly send payments through the Lightning Network with a single persistent connection.
     */
    sendPayment(requestParameters: SendPaymentRequest, initOverrides?: RequestInit): Promise<StreamResultOfLnrpcSendResponse>;
    /**
     * SendPaymentSync is the synchronous non-streaming version of SendPayment. This RPC is intended to be consumed by clients of the REST proxy. Additionally, this RPC expects the destination\'s public key and the payment hash (if any) to be encoded as hex strings.
     */
    sendPaymentSyncRaw(requestParameters: SendPaymentSyncRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcSendResponse>>;
    /**
     * SendPaymentSync is the synchronous non-streaming version of SendPayment. This RPC is intended to be consumed by clients of the REST proxy. Additionally, this RPC expects the destination\'s public key and the payment hash (if any) to be encoded as hex strings.
     */
    sendPaymentSync(requestParameters: SendPaymentSyncRequest, initOverrides?: RequestInit): Promise<LnrpcSendResponse>;
    /**
     * SendToRouteSync is a synchronous version of SendToRoute. It Will block until the payment either fails or succeeds.
     */
    sendToRouteSyncRaw(requestParameters: SendToRouteSyncRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcSendResponse>>;
    /**
     * SendToRouteSync is a synchronous version of SendToRoute. It Will block until the payment either fails or succeeds.
     */
    sendToRouteSync(requestParameters: SendToRouteSyncRequest, initOverrides?: RequestInit): Promise<LnrpcSendResponse>;
    /**
     * lncli: `signmessage` SignMessage signs a message with this node\'s private key. The returned signature string is `zbase32` encoded and pubkey recoverable, meaning that only the message digest and signature are needed for verification.
     */
    signMessageRaw(requestParameters: SignMessageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcSignMessageResponse>>;
    /**
     * lncli: `signmessage` SignMessage signs a message with this node\'s private key. The returned signature string is `zbase32` encoded and pubkey recoverable, meaning that only the message digest and signature are needed for verification.
     */
    signMessage(requestParameters: SignMessageRequest, initOverrides?: RequestInit): Promise<LnrpcSignMessageResponse>;
    /**
     * lncli: `stop` StopDaemon will send a shutdown request to the interrupt handler, triggering a graceful shutdown of the daemon.
     */
    stopDaemonRaw(requestParameters: StopDaemonRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * lncli: `stop` StopDaemon will send a shutdown request to the interrupt handler, triggering a graceful shutdown of the daemon.
     */
    stopDaemon(requestParameters: StopDaemonRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * SubscribeChannelBackups allows a client to sub-subscribe to the most up to date information concerning the state of all channel backups. Each time a new channel is added, we return the new set of channels, along with a multi-chan backup containing the backup info for all channels. Each time a channel is closed, we send a new update, which contains new new chan back ups, but the updated set of encrypted multi-chan backups with the closed channel(s) removed.
     */
    subscribeChannelBackupsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcChanBackupSnapshot>>;
    /**
     * SubscribeChannelBackups allows a client to sub-subscribe to the most up to date information concerning the state of all channel backups. Each time a new channel is added, we return the new set of channels, along with a multi-chan backup containing the backup info for all channels. Each time a channel is closed, we send a new update, which contains new new chan back ups, but the updated set of encrypted multi-chan backups with the closed channel(s) removed.
     */
    subscribeChannelBackups(initOverrides?: RequestInit): Promise<StreamResultOfLnrpcChanBackupSnapshot>;
    /**
     * SubscribeChannelEvents creates a uni-directional stream from the server to the client in which any updates relevant to the state of the channels are sent over. Events include new active channels, inactive channels, and closed channels.
     */
    subscribeChannelEventsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcChannelEventUpdate>>;
    /**
     * SubscribeChannelEvents creates a uni-directional stream from the server to the client in which any updates relevant to the state of the channels are sent over. Events include new active channels, inactive channels, and closed channels.
     */
    subscribeChannelEvents(initOverrides?: RequestInit): Promise<StreamResultOfLnrpcChannelEventUpdate>;
    /**
     * SubscribeChannelGraph launches a streaming RPC that allows the caller to receive notifications upon any changes to the channel graph topology from the point of view of the responding node. Events notified include: new nodes coming online, nodes updating their authenticated attributes, new channels being advertised, updates in the routing policy for a directional channel edge, and when channels are closed on-chain.
     */
    subscribeChannelGraphRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcGraphTopologyUpdate>>;
    /**
     * SubscribeChannelGraph launches a streaming RPC that allows the caller to receive notifications upon any changes to the channel graph topology from the point of view of the responding node. Events notified include: new nodes coming online, nodes updating their authenticated attributes, new channels being advertised, updates in the routing policy for a directional channel edge, and when channels are closed on-chain.
     */
    subscribeChannelGraph(initOverrides?: RequestInit): Promise<StreamResultOfLnrpcGraphTopologyUpdate>;
    /**
     * SubscribeInvoices returns a uni-directional stream (server -> client) for notifying the client of newly added/settled invoices. The caller can optionally specify the add_index and/or the settle_index. If the add_index is specified, then we\'ll first start by sending add invoice events for all invoices with an add_index greater than the specified value. If the settle_index is specified, the next, we\'ll send out all settle events for invoices with a settle_index greater than the specified value. One or both of these fields can be set. If no fields are set, then we\'ll only send out the latest add/settle events.
     */
    subscribeInvoicesRaw(requestParameters: SubscribeInvoicesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcInvoice>>;
    /**
     * SubscribeInvoices returns a uni-directional stream (server -> client) for notifying the client of newly added/settled invoices. The caller can optionally specify the add_index and/or the settle_index. If the add_index is specified, then we\'ll first start by sending add invoice events for all invoices with an add_index greater than the specified value. If the settle_index is specified, the next, we\'ll send out all settle events for invoices with a settle_index greater than the specified value. One or both of these fields can be set. If no fields are set, then we\'ll only send out the latest add/settle events.
     */
    subscribeInvoices(requestParameters: SubscribeInvoicesRequest, initOverrides?: RequestInit): Promise<StreamResultOfLnrpcInvoice>;
    /**
     * SubscribePeerEvents creates a uni-directional stream from the server to the client in which any events relevant to the state of peers are sent over. Events include peers going online and offline.
     */
    subscribePeerEventsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcPeerEvent>>;
    /**
     * SubscribePeerEvents creates a uni-directional stream from the server to the client in which any events relevant to the state of peers are sent over. Events include peers going online and offline.
     */
    subscribePeerEvents(initOverrides?: RequestInit): Promise<StreamResultOfLnrpcPeerEvent>;
    /**
     * SubscribeTransactions creates a uni-directional stream from the server to the client in which any newly discovered transactions relevant to the wallet are sent over.
     */
    subscribeTransactionsRaw(requestParameters: SubscribeTransactionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StreamResultOfLnrpcTransaction>>;
    /**
     * SubscribeTransactions creates a uni-directional stream from the server to the client in which any newly discovered transactions relevant to the wallet are sent over.
     */
    subscribeTransactions(requestParameters: SubscribeTransactionsRequest, initOverrides?: RequestInit): Promise<StreamResultOfLnrpcTransaction>;
    /**
     * lncli: `updatechanpolicy` UpdateChannelPolicy allows the caller to update the fee schedule and channel policies for all channels globally, or a particular channel.
     */
    updateChannelPolicyRaw(requestParameters: UpdateChannelPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * lncli: `updatechanpolicy` UpdateChannelPolicy allows the caller to update the fee schedule and channel policies for all channels globally, or a particular channel.
     */
    updateChannelPolicy(requestParameters: UpdateChannelPolicyRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * VerifyChanBackup allows a caller to verify the integrity of a channel backup snapshot. This method will accept either a packed Single or a packed Multi. Specifying both will result in an error.
     */
    verifyChanBackupRaw(requestParameters: VerifyChanBackupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>>;
    /**
     * VerifyChanBackup allows a caller to verify the integrity of a channel backup snapshot. This method will accept either a packed Single or a packed Multi. Specifying both will result in an error.
     */
    verifyChanBackup(requestParameters: VerifyChanBackupRequest, initOverrides?: RequestInit): Promise<object>;
    /**
     * lncli: `verifymessage` VerifyMessage verifies a signature over a msg. The signature must be zbase32 encoded and signed by an active node in the resident node\'s channel database. In addition to returning the validity of the signature, VerifyMessage also returns the recovered pubkey from the signature.
     */
    verifyMessageRaw(requestParameters: VerifyMessageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcVerifyMessageResponse>>;
    /**
     * lncli: `verifymessage` VerifyMessage verifies a signature over a msg. The signature must be zbase32 encoded and signed by an active node in the resident node\'s channel database. In addition to returning the validity of the signature, VerifyMessage also returns the recovered pubkey from the signature.
     */
    verifyMessage(requestParameters: VerifyMessageRequest, initOverrides?: RequestInit): Promise<LnrpcVerifyMessageResponse>;
    /**
     * lncli: `walletbalance` WalletBalance returns total unspent outputs(confirmed and unconfirmed), all confirmed unspent outputs and all unconfirmed unspent outputs under control of the wallet.
     */
    walletBalanceRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<LnrpcWalletBalanceResponse>>;
    /**
     * lncli: `walletbalance` WalletBalance returns total unspent outputs(confirmed and unconfirmed), all confirmed unspent outputs and all unconfirmed unspent outputs under control of the wallet.
     */
    walletBalance(initOverrides?: RequestInit): Promise<LnrpcWalletBalanceResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetNodeMetricsTypesEnum {
    Unknown = "UNKNOWN",
    BetweennessCentrality = "BETWEENNESS_CENTRALITY"
}
/**
    * @export
    * @enum {string}
    */
export declare enum NewAddressTypeEnum {
    WitnessPubkeyHash = "WITNESS_PUBKEY_HASH",
    NestedPubkeyHash = "NESTED_PUBKEY_HASH",
    UnusedWitnessPubkeyHash = "UNUSED_WITNESS_PUBKEY_HASH",
    UnusedNestedPubkeyHash = "UNUSED_NESTED_PUBKEY_HASH"
}
/**
    * @export
    * @enum {string}
    */
export declare enum QueryRoutesDestFeaturesEnum {
    DatalossProtectReq = "DATALOSS_PROTECT_REQ",
    DatalossProtectOpt = "DATALOSS_PROTECT_OPT",
    InitialRouingSync = "INITIAL_ROUING_SYNC",
    UpfrontShutdownScriptReq = "UPFRONT_SHUTDOWN_SCRIPT_REQ",
    UpfrontShutdownScriptOpt = "UPFRONT_SHUTDOWN_SCRIPT_OPT",
    GossipQueriesReq = "GOSSIP_QUERIES_REQ",
    GossipQueriesOpt = "GOSSIP_QUERIES_OPT",
    TlvOnionReq = "TLV_ONION_REQ",
    TlvOnionOpt = "TLV_ONION_OPT",
    ExtGossipQueriesReq = "EXT_GOSSIP_QUERIES_REQ",
    ExtGossipQueriesOpt = "EXT_GOSSIP_QUERIES_OPT",
    StaticRemoteKeyReq = "STATIC_REMOTE_KEY_REQ",
    StaticRemoteKeyOpt = "STATIC_REMOTE_KEY_OPT",
    PaymentAddrReq = "PAYMENT_ADDR_REQ",
    PaymentAddrOpt = "PAYMENT_ADDR_OPT",
    MppReq = "MPP_REQ",
    MppOpt = "MPP_OPT",
    WumboChannelsReq = "WUMBO_CHANNELS_REQ",
    WumboChannelsOpt = "WUMBO_CHANNELS_OPT",
    AnchorsReq = "ANCHORS_REQ",
    AnchorsOpt = "ANCHORS_OPT",
    AnchorsZeroFeeHtlcReq = "ANCHORS_ZERO_FEE_HTLC_REQ",
    AnchorsZeroFeeHtlcOpt = "ANCHORS_ZERO_FEE_HTLC_OPT",
    AmpReq = "AMP_REQ",
    AmpOpt = "AMP_OPT"
}
