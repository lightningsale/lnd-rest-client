"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class LightningApi extends runtime.BaseAPI {
    /**
     * lncli: `abandonchannel` AbandonChannel removes all channel state from the database except for a close summary. This method can be used to get rid of permanently unusable channels due to bugs fixed in newer versions of lnd. This method can also be used to remove externally funded channels where the funding transaction was never broadcast. Only available for non-externally funded channels in dev build.
     */
    abandonChannelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channel_point_funding_txid_str === null || requestParameters.channel_point_funding_txid_str === undefined) {
                throw new runtime.RequiredError('channel_point_funding_txid_str', 'Required parameter requestParameters.channel_point_funding_txid_str was null or undefined when calling abandonChannel.');
            }
            if (requestParameters.channel_point_output_index === null || requestParameters.channel_point_output_index === undefined) {
                throw new runtime.RequiredError('channel_point_output_index', 'Required parameter requestParameters.channel_point_output_index was null or undefined when calling abandonChannel.');
            }
            const queryParameters = {};
            if (requestParameters.channel_point_funding_txid_bytes !== undefined) {
                queryParameters['channel_point.funding_txid_bytes'] = requestParameters.channel_point_funding_txid_bytes;
            }
            if (requestParameters.pending_funding_shim_only !== undefined) {
                queryParameters['pending_funding_shim_only'] = requestParameters.pending_funding_shim_only;
            }
            if (requestParameters.i_know_what_i_am_doing !== undefined) {
                queryParameters['i_know_what_i_am_doing'] = requestParameters.i_know_what_i_am_doing;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/abandon/{channel_point.funding_txid_str}/{channel_point.output_index}`.replace(`{${"channel_point.funding_txid_str"}}`, encodeURIComponent(String(requestParameters.channel_point_funding_txid_str))).replace(`{${"channel_point.output_index"}}`, encodeURIComponent(String(requestParameters.channel_point_output_index))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * lncli: `abandonchannel` AbandonChannel removes all channel state from the database except for a close summary. This method can be used to get rid of permanently unusable channels due to bugs fixed in newer versions of lnd. This method can also be used to remove externally funded channels where the funding transaction was never broadcast. Only available for non-externally funded channels in dev build.
     */
    abandonChannel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.abandonChannelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `addinvoice` AddInvoice attempts to add a new invoice to the invoice database. Any duplicated invoices are rejected, therefore all invoices *must* have a unique payment preimage.
     */
    addInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling addInvoice.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/invoices`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcInvoiceToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcAddInvoiceResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `addinvoice` AddInvoice attempts to add a new invoice to the invoice database. Any duplicated invoices are rejected, therefore all invoices *must* have a unique payment preimage.
     */
    addInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `bakemacaroon` BakeMacaroon allows the creation of a new macaroon with custom read and write permissions. No first-party caveats are added since this can be done offline.
     */
    bakeMacaroonRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling bakeMacaroon.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/macaroon`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcBakeMacaroonRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcBakeMacaroonResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `bakemacaroon` BakeMacaroon allows the creation of a new macaroon with custom read and write permissions. No first-party caveats are added since this can be done offline.
     */
    bakeMacaroon(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bakeMacaroonRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ChannelAcceptor dispatches a bi-directional streaming RPC in which OpenChannel requests are sent to the client and the client responds with a boolean that tells LND whether or not to accept the channel. This allows node operators to specify their own criteria for accepting inbound channels through a single persistent connection.
     */
    channelAcceptorRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling channelAcceptor.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/acceptor`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcChannelAcceptResponseToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcChannelAcceptRequestFromJSON(jsonValue));
        });
    }
    /**
     * ChannelAcceptor dispatches a bi-directional streaming RPC in which OpenChannel requests are sent to the client and the client responds with a boolean that tells LND whether or not to accept the channel. This allows node operators to specify their own criteria for accepting inbound channels through a single persistent connection.
     */
    channelAcceptor(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelAcceptorRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `channelbalance` ChannelBalance returns a report on the total funds across all open channels, categorized in local/remote, pending local/remote and unsettled local/remote balances.
     */
    channelBalanceRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/balance/channels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcChannelBalanceResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `channelbalance` ChannelBalance returns a report on the total funds across all open channels, categorized in local/remote, pending local/remote and unsettled local/remote balances.
     */
    channelBalance(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelBalanceRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `closechannel` CloseChannel attempts to close an active channel identified by its channel outpoint (ChannelPoint). The actions of this method can additionally be augmented to attempt a force close after a timeout period in the case of an inactive peer. If a non-force close (cooperative closure) is requested, then the user can specify either a target number of blocks until the closure transaction is confirmed, or a manual fee rate. If neither are specified, then a default lax, block confirmation target is used.
     */
    closeChannelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channel_point_funding_txid_str === null || requestParameters.channel_point_funding_txid_str === undefined) {
                throw new runtime.RequiredError('channel_point_funding_txid_str', 'Required parameter requestParameters.channel_point_funding_txid_str was null or undefined when calling closeChannel.');
            }
            if (requestParameters.channel_point_output_index === null || requestParameters.channel_point_output_index === undefined) {
                throw new runtime.RequiredError('channel_point_output_index', 'Required parameter requestParameters.channel_point_output_index was null or undefined when calling closeChannel.');
            }
            const queryParameters = {};
            if (requestParameters.channel_point_funding_txid_bytes !== undefined) {
                queryParameters['channel_point.funding_txid_bytes'] = requestParameters.channel_point_funding_txid_bytes;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            if (requestParameters.target_conf !== undefined) {
                queryParameters['target_conf'] = requestParameters.target_conf;
            }
            if (requestParameters.sat_per_byte !== undefined) {
                queryParameters['sat_per_byte'] = requestParameters.sat_per_byte;
            }
            if (requestParameters.delivery_address !== undefined) {
                queryParameters['delivery_address'] = requestParameters.delivery_address;
            }
            if (requestParameters.sat_per_vbyte !== undefined) {
                queryParameters['sat_per_vbyte'] = requestParameters.sat_per_vbyte;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/{channel_point.funding_txid_str}/{channel_point.output_index}`.replace(`{${"channel_point.funding_txid_str"}}`, encodeURIComponent(String(requestParameters.channel_point_funding_txid_str))).replace(`{${"channel_point.output_index"}}`, encodeURIComponent(String(requestParameters.channel_point_output_index))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcCloseStatusUpdateFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `closechannel` CloseChannel attempts to close an active channel identified by its channel outpoint (ChannelPoint). The actions of this method can additionally be augmented to attempt a force close after a timeout period in the case of an inactive peer. If a non-force close (cooperative closure) is requested, then the user can specify either a target number of blocks until the closure transaction is confirmed, or a manual fee rate. If neither are specified, then a default lax, block confirmation target is used.
     */
    closeChannel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.closeChannelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `closedchannels` ClosedChannels returns a description of all the closed channels that this node was a participant in.
     */
    closedChannelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.cooperative !== undefined) {
                queryParameters['cooperative'] = requestParameters.cooperative;
            }
            if (requestParameters.local_force !== undefined) {
                queryParameters['local_force'] = requestParameters.local_force;
            }
            if (requestParameters.remote_force !== undefined) {
                queryParameters['remote_force'] = requestParameters.remote_force;
            }
            if (requestParameters.breach !== undefined) {
                queryParameters['breach'] = requestParameters.breach;
            }
            if (requestParameters.funding_canceled !== undefined) {
                queryParameters['funding_canceled'] = requestParameters.funding_canceled;
            }
            if (requestParameters.abandoned !== undefined) {
                queryParameters['abandoned'] = requestParameters.abandoned;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/closed`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcClosedChannelsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `closedchannels` ClosedChannels returns a description of all the closed channels that this node was a participant in.
     */
    closedChannels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.closedChannelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `connect` ConnectPeer attempts to establish a connection to a remote peer. This is at the networking level, and is used for communication between nodes. This is distinct from establishing a channel with a peer.
     */
    connectPeerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling connectPeer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/peers`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcConnectPeerRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * lncli: `connect` ConnectPeer attempts to establish a connection to a remote peer. This is at the networking level, and is used for communication between nodes. This is distinct from establishing a channel with a peer.
     */
    connectPeer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPeerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `debuglevel` DebugLevel allows a caller to programmatically set the logging verbosity of lnd. The logging can be targeted according to a coarse daemon-wide logging level, or in a granular fashion to specify the logging for a target sub-system.
     */
    debugLevelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling debugLevel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/debuglevel`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcDebugLevelRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcDebugLevelResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `debuglevel` DebugLevel allows a caller to programmatically set the logging verbosity of lnd. The logging can be targeted according to a coarse daemon-wide logging level, or in a granular fashion to specify the logging for a target sub-system.
     */
    debugLevel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.debugLevelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `decodepayreq` DecodePayReq takes an encoded payment request string and attempts to decode it, returning a full description of the conditions encoded within the payment request.
     */
    decodePayReqRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pay_req === null || requestParameters.pay_req === undefined) {
                throw new runtime.RequiredError('pay_req', 'Required parameter requestParameters.pay_req was null or undefined when calling decodePayReq.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/payreq/{pay_req}`.replace(`{${"pay_req"}}`, encodeURIComponent(String(requestParameters.pay_req))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcPayReqFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `decodepayreq` DecodePayReq takes an encoded payment request string and attempts to decode it, returning a full description of the conditions encoded within the payment request.
     */
    decodePayReq(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.decodePayReqRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * DeleteAllPayments deletes all outgoing payments from DB.
     */
    deleteAllPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.failed_payments_only !== undefined) {
                queryParameters['failed_payments_only'] = requestParameters.failed_payments_only;
            }
            if (requestParameters.failed_htlcs_only !== undefined) {
                queryParameters['failed_htlcs_only'] = requestParameters.failed_htlcs_only;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/payments`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * DeleteAllPayments deletes all outgoing payments from DB.
     */
    deleteAllPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAllPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `deletemacaroonid` DeleteMacaroonID deletes the specified macaroon ID and invalidates all macaroons derived from that ID.
     */
    deleteMacaroonIDRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.root_key_id === null || requestParameters.root_key_id === undefined) {
                throw new runtime.RequiredError('root_key_id', 'Required parameter requestParameters.root_key_id was null or undefined when calling deleteMacaroonID.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/macaroon/{root_key_id}`.replace(`{${"root_key_id"}}`, encodeURIComponent(String(requestParameters.root_key_id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcDeleteMacaroonIDResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `deletemacaroonid` DeleteMacaroonID deletes the specified macaroon ID and invalidates all macaroons derived from that ID.
     */
    deleteMacaroonID(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMacaroonIDRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `describegraph` DescribeGraph returns a description of the latest graph state from the point of view of the node. The graph information is partitioned into two components: all the nodes/vertexes, and all the edges that connect the vertexes themselves. As this is a directed graph, the edges also contain the node directional specific routing policy which includes: the time lock delta, fee information, etc.
     */
    describeGraphRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.include_unannounced !== undefined) {
                queryParameters['include_unannounced'] = requestParameters.include_unannounced;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcChannelGraphFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `describegraph` DescribeGraph returns a description of the latest graph state from the point of view of the node. The graph information is partitioned into two components: all the nodes/vertexes, and all the edges that connect the vertexes themselves. As this is a directed graph, the edges also contain the node directional specific routing policy which includes: the time lock delta, fee information, etc.
     */
    describeGraph(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.describeGraphRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `disconnect` DisconnectPeer attempts to disconnect one peer from another identified by a given pubKey. In the case that we currently have a pending or active channel with the target peer, then this action will be not be allowed.
     */
    disconnectPeerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pub_key === null || requestParameters.pub_key === undefined) {
                throw new runtime.RequiredError('pub_key', 'Required parameter requestParameters.pub_key was null or undefined when calling disconnectPeer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/peers/{pub_key}`.replace(`{${"pub_key"}}`, encodeURIComponent(String(requestParameters.pub_key))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * lncli: `disconnect` DisconnectPeer attempts to disconnect one peer from another identified by a given pubKey. In the case that we currently have a pending or active channel with the target peer, then this action will be not be allowed.
     */
    disconnectPeer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.disconnectPeerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * When using REST, the `AddrToAmount` map type can be set by appending `&AddrToAmount[<address>]=<amount_to_send>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `estimatefee` EstimateFee asks the chain backend to estimate the fee rate and total fees for a transaction that pays to multiple specified outputs.
     */
    estimateFeeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.target_conf !== undefined) {
                queryParameters['target_conf'] = requestParameters.target_conf;
            }
            if (requestParameters.min_confs !== undefined) {
                queryParameters['min_confs'] = requestParameters.min_confs;
            }
            if (requestParameters.spend_unconfirmed !== undefined) {
                queryParameters['spend_unconfirmed'] = requestParameters.spend_unconfirmed;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/transactions/fee`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcEstimateFeeResponseFromJSON(jsonValue));
        });
    }
    /**
     * When using REST, the `AddrToAmount` map type can be set by appending `&AddrToAmount[<address>]=<amount_to_send>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `estimatefee` EstimateFee asks the chain backend to estimate the fee rate and total fees for a transaction that pays to multiple specified outputs.
     */
    estimateFee(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.estimateFeeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ExportAllChannelBackups returns static channel backups for all existing channels known to lnd. A set of regular singular static channel backups for each channel are returned. Additionally, a multi-channel backup is returned as well, which contains a single encrypted blob containing the backups of each channel.
     */
    exportAllChannelBackupsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/backup`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcChanBackupSnapshotFromJSON(jsonValue));
        });
    }
    /**
     * ExportAllChannelBackups returns static channel backups for all existing channels known to lnd. A set of regular singular static channel backups for each channel are returned. Additionally, a multi-channel backup is returned as well, which contains a single encrypted blob containing the backups of each channel.
     */
    exportAllChannelBackups(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.exportAllChannelBackupsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `exportchanbackup` ExportChannelBackup attempts to return an encrypted static channel backup for the target channel identified by it channel point. The backup is encrypted with a key generated from the aezeed seed of the user. The returned backup can either be restored using the RestoreChannelBackup method once lnd is running, or via the InitWallet and UnlockWallet methods from the WalletUnlocker service.
     */
    exportChannelBackupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.chan_point_funding_txid_str === null || requestParameters.chan_point_funding_txid_str === undefined) {
                throw new runtime.RequiredError('chan_point_funding_txid_str', 'Required parameter requestParameters.chan_point_funding_txid_str was null or undefined when calling exportChannelBackup.');
            }
            if (requestParameters.chan_point_output_index === null || requestParameters.chan_point_output_index === undefined) {
                throw new runtime.RequiredError('chan_point_output_index', 'Required parameter requestParameters.chan_point_output_index was null or undefined when calling exportChannelBackup.');
            }
            const queryParameters = {};
            if (requestParameters.chan_point_funding_txid_bytes !== undefined) {
                queryParameters['chan_point.funding_txid_bytes'] = requestParameters.chan_point_funding_txid_bytes;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/backup/{chan_point.funding_txid_str}/{chan_point.output_index}`.replace(`{${"chan_point.funding_txid_str"}}`, encodeURIComponent(String(requestParameters.chan_point_funding_txid_str))).replace(`{${"chan_point.output_index"}}`, encodeURIComponent(String(requestParameters.chan_point_output_index))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcChannelBackupFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `exportchanbackup` ExportChannelBackup attempts to return an encrypted static channel backup for the target channel identified by it channel point. The backup is encrypted with a key generated from the aezeed seed of the user. The returned backup can either be restored using the RestoreChannelBackup method once lnd is running, or via the InitWallet and UnlockWallet methods from the WalletUnlocker service.
     */
    exportChannelBackup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.exportChannelBackupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `feereport` FeeReport allows the caller to obtain a report detailing the current fee schedule enforced by the node globally for each channel.
     */
    feeReportRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/fees`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcFeeReportResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `feereport` FeeReport allows the caller to obtain a report detailing the current fee schedule enforced by the node globally for each channel.
     */
    feeReport(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.feeReportRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * A list of forwarding events are returned. The size of each forwarding event is 40 bytes, and the max message size able to be returned in gRPC is 4 MiB. As a result each message can only contain 50k entries. Each response has the index offset of the last entry. The index offset can be provided to the request to allow the caller to skip a series of records.
     * lncli: `fwdinghistory` ForwardingHistory allows the caller to query the htlcswitch for a record of all HTLCs forwarded within the target time range, and integer offset within that time range, for a maximum number of events. If no maximum number of events is specified, up to 100 events will be returned. If no time-range is specified, then events will be returned in the order that they occured.
     */
    forwardingHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling forwardingHistory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/switch`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcForwardingHistoryRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcForwardingHistoryResponseFromJSON(jsonValue));
        });
    }
    /**
     * A list of forwarding events are returned. The size of each forwarding event is 40 bytes, and the max message size able to be returned in gRPC is 4 MiB. As a result each message can only contain 50k entries. Each response has the index offset of the last entry. The index offset can be provided to the request to allow the caller to skip a series of records.
     * lncli: `fwdinghistory` ForwardingHistory allows the caller to query the htlcswitch for a record of all HTLCs forwarded within the target time range, and integer offset within that time range, for a maximum number of events. If no maximum number of events is specified, up to 100 events will be returned. If no time-range is specified, then events will be returned in the order that they occured.
     */
    forwardingHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.forwardingHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * FundingStateStep is an advanced funding related call that allows the caller to either execute some preparatory steps for a funding workflow, or manually progress a funding workflow. The primary way a funding flow is identified is via its pending channel ID. As an example, this method can be used to specify that we\'re expecting a funding flow for a particular pending channel ID, for which we need to use specific parameters. Alternatively, this can be used to interactively drive PSBT signing for funding for partially complete funding transactions.
     */
    fundingStateStepRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling fundingStateStep.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/funding/step`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcFundingTransitionMsgToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * FundingStateStep is an advanced funding related call that allows the caller to either execute some preparatory steps for a funding workflow, or manually progress a funding workflow. The primary way a funding flow is identified is via its pending channel ID. As an example, this method can be used to specify that we\'re expecting a funding flow for a particular pending channel ID, for which we need to use specific parameters. Alternatively, this can be used to interactively drive PSBT signing for funding for partially complete funding transactions.
     */
    fundingStateStep(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.fundingStateStepRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `getchaninfo` GetChanInfo returns the latest authenticated network announcement for the given channel identified by its channel ID: an 8-byte integer which uniquely identifies the location of transaction\'s funding output within the blockchain.
     */
    getChanInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.chan_id === null || requestParameters.chan_id === undefined) {
                throw new runtime.RequiredError('chan_id', 'Required parameter requestParameters.chan_id was null or undefined when calling getChanInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph/edge/{chan_id}`.replace(`{${"chan_id"}}`, encodeURIComponent(String(requestParameters.chan_id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcChannelEdgeFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `getchaninfo` GetChanInfo returns the latest authenticated network announcement for the given channel identified by its channel ID: an 8-byte integer which uniquely identifies the location of transaction\'s funding output within the blockchain.
     */
    getChanInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChanInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `getinfo` GetInfo returns general information concerning the lightning node including it\'s identity pubkey, alias, the chains it is connected to, and information concerning the number of open+pending channels.
     */
    getInfoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/getinfo`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcGetInfoResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `getinfo` GetInfo returns general information concerning the lightning node including it\'s identity pubkey, alias, the chains it is connected to, and information concerning the number of open+pending channels.
     */
    getInfo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `getnetworkinfo` GetNetworkInfo returns some basic stats about the known channel graph from the point of view of the node.
     */
    getNetworkInfoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph/info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcNetworkInfoFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `getnetworkinfo` GetNetworkInfo returns some basic stats about the known channel graph from the point of view of the node.
     */
    getNetworkInfo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNetworkInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `getnodeinfo` GetNodeInfo returns the latest advertised, aggregated, and authenticated channel information for the specified node identified by its public key.
     */
    getNodeInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pub_key === null || requestParameters.pub_key === undefined) {
                throw new runtime.RequiredError('pub_key', 'Required parameter requestParameters.pub_key was null or undefined when calling getNodeInfo.');
            }
            const queryParameters = {};
            if (requestParameters.include_channels !== undefined) {
                queryParameters['include_channels'] = requestParameters.include_channels;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph/node/{pub_key}`.replace(`{${"pub_key"}}`, encodeURIComponent(String(requestParameters.pub_key))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcNodeInfoFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `getnodeinfo` GetNodeInfo returns the latest advertised, aggregated, and authenticated channel information for the specified node identified by its public key.
     */
    getNodeInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNodeInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `getnodemetrics` GetNodeMetrics returns node metrics calculated from the graph. Currently the only supported metric is betweenness centrality of individual nodes.
     */
    getNodeMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.types) {
                queryParameters['types'] = requestParameters.types;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph/nodemetrics`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcNodeMetricsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `getnodemetrics` GetNodeMetrics returns node metrics calculated from the graph. Currently the only supported metric is betweenness centrality of individual nodes.
     */
    getNodeMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNodeMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * * lncli: `getrecoveryinfo` GetRecoveryInfo returns information concerning the recovery mode including whether it\'s in a recovery mode, whether the recovery is finished, and the progress made so far.
     */
    getRecoveryInfoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/getrecoveryinfo`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcGetRecoveryInfoResponseFromJSON(jsonValue));
        });
    }
    /**
     * * lncli: `getrecoveryinfo` GetRecoveryInfo returns information concerning the recovery mode including whether it\'s in a recovery mode, whether the recovery is finished, and the progress made so far.
     */
    getRecoveryInfo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRecoveryInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listchaintxns` GetTransactions returns a list describing all the known transactions relevant to the wallet.
     */
    getTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.start_height !== undefined) {
                queryParameters['start_height'] = requestParameters.start_height;
            }
            if (requestParameters.end_height !== undefined) {
                queryParameters['end_height'] = requestParameters.end_height;
            }
            if (requestParameters.account !== undefined) {
                queryParameters['account'] = requestParameters.account;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/transactions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcTransactionDetailsFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listchaintxns` GetTransactions returns a list describing all the known transactions relevant to the wallet.
     */
    getTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listchannels` ListChannels returns a description of all the open channels that this node is a participant in.
     */
    listChannelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.active_only !== undefined) {
                queryParameters['active_only'] = requestParameters.active_only;
            }
            if (requestParameters.inactive_only !== undefined) {
                queryParameters['inactive_only'] = requestParameters.inactive_only;
            }
            if (requestParameters.public_only !== undefined) {
                queryParameters['public_only'] = requestParameters.public_only;
            }
            if (requestParameters.private_only !== undefined) {
                queryParameters['private_only'] = requestParameters.private_only;
            }
            if (requestParameters.peer !== undefined) {
                queryParameters['peer'] = requestParameters.peer;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListChannelsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listchannels` ListChannels returns a description of all the open channels that this node is a participant in.
     */
    listChannels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listChannelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listinvoices` ListInvoices returns a list of all the invoices currently stored within the database. Any active debug invoices are ignored. It has full support for paginated responses, allowing users to query for specific invoices through their add_index. This can be done by using either the first_index_offset or last_index_offset fields included in the response as the index_offset of the next request. By default, the first 100 invoices created will be returned. Backwards pagination is also supported through the Reversed flag.
     */
    listInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.pending_only !== undefined) {
                queryParameters['pending_only'] = requestParameters.pending_only;
            }
            if (requestParameters.index_offset !== undefined) {
                queryParameters['index_offset'] = requestParameters.index_offset;
            }
            if (requestParameters.num_max_invoices !== undefined) {
                queryParameters['num_max_invoices'] = requestParameters.num_max_invoices;
            }
            if (requestParameters.reversed !== undefined) {
                queryParameters['reversed'] = requestParameters.reversed;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/invoices`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListInvoiceResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listinvoices` ListInvoices returns a list of all the invoices currently stored within the database. Any active debug invoices are ignored. It has full support for paginated responses, allowing users to query for specific invoices through their add_index. This can be done by using either the first_index_offset or last_index_offset fields included in the response as the index_offset of the next request. By default, the first 100 invoices created will be returned. Backwards pagination is also supported through the Reversed flag.
     */
    listInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listmacaroonids` ListMacaroonIDs returns all root key IDs that are in use.
     */
    listMacaroonIDsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/macaroon/ids`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListMacaroonIDsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listmacaroonids` ListMacaroonIDs returns all root key IDs that are in use.
     */
    listMacaroonIDs(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listMacaroonIDsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listpayments` ListPayments returns a list of all outgoing payments.
     */
    listPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.include_incomplete !== undefined) {
                queryParameters['include_incomplete'] = requestParameters.include_incomplete;
            }
            if (requestParameters.index_offset !== undefined) {
                queryParameters['index_offset'] = requestParameters.index_offset;
            }
            if (requestParameters.max_payments !== undefined) {
                queryParameters['max_payments'] = requestParameters.max_payments;
            }
            if (requestParameters.reversed !== undefined) {
                queryParameters['reversed'] = requestParameters.reversed;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/payments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListPaymentsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listpayments` ListPayments returns a list of all outgoing payments.
     */
    listPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listpeers` ListPeers returns a verbose listing of all currently active peers.
     */
    listPeersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.latest_error !== undefined) {
                queryParameters['latest_error'] = requestParameters.latest_error;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/peers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListPeersResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listpeers` ListPeers returns a verbose listing of all currently active peers.
     */
    listPeers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPeersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `listpermissions` ListPermissions lists all RPC method URIs and their required macaroon permissions to access them.
     */
    listPermissionsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/macaroon/permissions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListPermissionsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `listpermissions` ListPermissions lists all RPC method URIs and their required macaroon permissions to access them.
     */
    listPermissions(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPermissionsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * ListUnspent returns a list of all utxos spendable by the wallet with a number of confirmations between the specified minimum and maximum.
     * lncli: `listunspent` Deprecated, use walletrpc.ListUnspent instead.
     */
    listUnspentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.min_confs !== undefined) {
                queryParameters['min_confs'] = requestParameters.min_confs;
            }
            if (requestParameters.max_confs !== undefined) {
                queryParameters['max_confs'] = requestParameters.max_confs;
            }
            if (requestParameters.account !== undefined) {
                queryParameters['account'] = requestParameters.account;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/utxos`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcListUnspentResponseFromJSON(jsonValue));
        });
    }
    /**
     * ListUnspent returns a list of all utxos spendable by the wallet with a number of confirmations between the specified minimum and maximum.
     * lncli: `listunspent` Deprecated, use walletrpc.ListUnspent instead.
     */
    listUnspent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listUnspentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `lookupinvoice` LookupInvoice attempts to look up an invoice according to its payment hash. The passed payment hash *must* be exactly 32 bytes, if not, an error is returned.
     */
    lookupInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.r_hash_str === null || requestParameters.r_hash_str === undefined) {
                throw new runtime.RequiredError('r_hash_str', 'Required parameter requestParameters.r_hash_str was null or undefined when calling lookupInvoice.');
            }
            const queryParameters = {};
            if (requestParameters.r_hash !== undefined) {
                queryParameters['r_hash'] = requestParameters.r_hash;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/invoice/{r_hash_str}`.replace(`{${"r_hash_str"}}`, encodeURIComponent(String(requestParameters.r_hash_str))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcInvoiceFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `lookupinvoice` LookupInvoice attempts to look up an invoice according to its payment hash. The passed payment hash *must* be exactly 32 bytes, if not, an error is returned.
     */
    lookupInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lookupInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `newaddress` NewAddress creates a new address under control of the local wallet.
     */
    newAddressRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.account !== undefined) {
                queryParameters['account'] = requestParameters.account;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/newaddress`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcNewAddressResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `newaddress` NewAddress creates a new address under control of the local wallet.
     */
    newAddress(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.newAddressRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `openchannel` OpenChannel attempts to open a singly funded channel specified in the request to a remote peer. Users are able to specify a target number of blocks that the funding transaction should be confirmed in, or a manual fee rate to us for the funding transaction. If neither are specified, then a lax block confirmation target is used. Each OpenStatusUpdate will return the pending channel ID of the in-progress channel. Depending on the arguments specified in the OpenChannelRequest, this pending channel ID can then be used to manually progress the channel funding flow.
     */
    openChannelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling openChannel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/stream`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcOpenChannelRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcOpenStatusUpdateFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `openchannel` OpenChannel attempts to open a singly funded channel specified in the request to a remote peer. Users are able to specify a target number of blocks that the funding transaction should be confirmed in, or a manual fee rate to us for the funding transaction. If neither are specified, then a lax block confirmation target is used. Each OpenStatusUpdate will return the pending channel ID of the in-progress channel. Depending on the arguments specified in the OpenChannelRequest, this pending channel ID can then be used to manually progress the channel funding flow.
     */
    openChannel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.openChannelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * OpenChannelSync is a synchronous version of the OpenChannel RPC call. This call is meant to be consumed by clients to the REST proxy. As with all other sync calls, all byte slices are intended to be populated as hex encoded strings.
     */
    openChannelSyncRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling openChannelSync.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcOpenChannelRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcChannelPointFromJSON(jsonValue));
        });
    }
    /**
     * OpenChannelSync is a synchronous version of the OpenChannel RPC call. This call is meant to be consumed by clients to the REST proxy. As with all other sync calls, all byte slices are intended to be populated as hex encoded strings.
     */
    openChannelSync(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.openChannelSyncRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `pendingchannels` PendingChannels returns a list of all the channels that are currently considered \"pending\". A channel is pending if it has finished the funding workflow and is waiting for confirmations for the funding txn, or is in the process of closure, either initiated cooperatively or non-cooperatively.
     */
    pendingChannelsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/pending`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcPendingChannelsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `pendingchannels` PendingChannels returns a list of all the channels that are currently considered \"pending\". A channel is pending if it has finished the funding workflow and is waiting for confirmations for the funding txn, or is in the process of closure, either initiated cooperatively or non-cooperatively.
     */
    pendingChannels(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pendingChannelsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * When using REST, the `dest_custom_records` map type can be set by appending `&dest_custom_records[<record_number>]=<record_data_base64_url_encoded>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `queryroutes` QueryRoutes attempts to query the daemon\'s Channel Router for a possible route to a target destination capable of carrying a specific amount of satoshis. The returned route contains the full details required to craft and send an HTLC, also including the necessary information that should be present within the Sphinx packet encapsulated within the HTLC.
     */
    queryRoutesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pub_key === null || requestParameters.pub_key === undefined) {
                throw new runtime.RequiredError('pub_key', 'Required parameter requestParameters.pub_key was null or undefined when calling queryRoutes.');
            }
            if (requestParameters.amt === null || requestParameters.amt === undefined) {
                throw new runtime.RequiredError('amt', 'Required parameter requestParameters.amt was null or undefined when calling queryRoutes.');
            }
            const queryParameters = {};
            if (requestParameters.amt_msat !== undefined) {
                queryParameters['amt_msat'] = requestParameters.amt_msat;
            }
            if (requestParameters.final_cltv_delta !== undefined) {
                queryParameters['final_cltv_delta'] = requestParameters.final_cltv_delta;
            }
            if (requestParameters.fee_limit_fixed !== undefined) {
                queryParameters['fee_limit.fixed'] = requestParameters.fee_limit_fixed;
            }
            if (requestParameters.fee_limit_fixed_msat !== undefined) {
                queryParameters['fee_limit.fixed_msat'] = requestParameters.fee_limit_fixed_msat;
            }
            if (requestParameters.fee_limit_percent !== undefined) {
                queryParameters['fee_limit.percent'] = requestParameters.fee_limit_percent;
            }
            if (requestParameters.ignored_nodes) {
                queryParameters['ignored_nodes'] = requestParameters.ignored_nodes;
            }
            if (requestParameters.source_pub_key !== undefined) {
                queryParameters['source_pub_key'] = requestParameters.source_pub_key;
            }
            if (requestParameters.use_mission_control !== undefined) {
                queryParameters['use_mission_control'] = requestParameters.use_mission_control;
            }
            if (requestParameters.cltv_limit !== undefined) {
                queryParameters['cltv_limit'] = requestParameters.cltv_limit;
            }
            if (requestParameters.outgoing_chan_id !== undefined) {
                queryParameters['outgoing_chan_id'] = requestParameters.outgoing_chan_id;
            }
            if (requestParameters.last_hop_pubkey !== undefined) {
                queryParameters['last_hop_pubkey'] = requestParameters.last_hop_pubkey;
            }
            if (requestParameters.dest_features) {
                queryParameters['dest_features'] = requestParameters.dest_features;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph/routes/{pub_key}/{amt}`.replace(`{${"pub_key"}}`, encodeURIComponent(String(requestParameters.pub_key))).replace(`{${"amt"}}`, encodeURIComponent(String(requestParameters.amt))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcQueryRoutesResponseFromJSON(jsonValue));
        });
    }
    /**
     * When using REST, the `dest_custom_records` map type can be set by appending `&dest_custom_records[<record_number>]=<record_data_base64_url_encoded>` to the URL. Unfortunately this map type doesn\'t appear in the REST API documentation because of a bug in the grpc-gateway library.
     * lncli: `queryroutes` QueryRoutes attempts to query the daemon\'s Channel Router for a possible route to a target destination capable of carrying a specific amount of satoshis. The returned route contains the full details required to craft and send an HTLC, also including the necessary information that should be present within the Sphinx packet encapsulated within the HTLC.
     */
    queryRoutes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.queryRoutesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `restorechanbackup` RestoreChannelBackups accepts a set of singular channel backups, or a single encrypted multi-chan backup and attempts to recover any funds remaining within the channel. If we are able to unpack the backup, then the new channel will be shown under listchannels, as well as pending channels.
     */
    restoreChannelBackupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling restoreChannelBackups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/backup/restore`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcRestoreChanBackupRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * lncli: `restorechanbackup` RestoreChannelBackups accepts a set of singular channel backups, or a single encrypted multi-chan backup and attempts to recover any funds remaining within the channel. If we are able to unpack the backup, then the new channel will be shown under listchannels, as well as pending channels.
     */
    restoreChannelBackups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.restoreChannelBackupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `sendcoins` SendCoins executes a request to send coins to a particular address. Unlike SendMany, this RPC call only allows creating a single output at a time. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendCoinsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling sendCoins.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/transactions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcSendCoinsRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcSendCoinsResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `sendcoins` SendCoins executes a request to send coins to a particular address. Unlike SendMany, this RPC call only allows creating a single output at a time. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendCoins(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendCoinsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `sendmany` SendMany handles a request for a transaction that creates multiple specified outputs in parallel. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendManyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling sendMany.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/transactions/many`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcSendManyRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcSendManyResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `sendmany` SendMany handles a request for a transaction that creates multiple specified outputs in parallel. If neither target_conf, or sat_per_vbyte are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.
     */
    sendMany(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendManyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `sendpayment` Deprecated, use routerrpc.SendPaymentV2. SendPayment dispatches a bi-directional streaming RPC for sending payments through the Lightning Network. A single RPC invocation creates a persistent bi-directional stream allowing clients to rapidly send payments through the Lightning Network with a single persistent connection.
     */
    sendPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling sendPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/transaction-stream`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcSendRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcSendResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `sendpayment` Deprecated, use routerrpc.SendPaymentV2. SendPayment dispatches a bi-directional streaming RPC for sending payments through the Lightning Network. A single RPC invocation creates a persistent bi-directional stream allowing clients to rapidly send payments through the Lightning Network with a single persistent connection.
     */
    sendPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SendPaymentSync is the synchronous non-streaming version of SendPayment. This RPC is intended to be consumed by clients of the REST proxy. Additionally, this RPC expects the destination\'s public key and the payment hash (if any) to be encoded as hex strings.
     */
    sendPaymentSyncRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling sendPaymentSync.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/transactions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcSendRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcSendResponseFromJSON(jsonValue));
        });
    }
    /**
     * SendPaymentSync is the synchronous non-streaming version of SendPayment. This RPC is intended to be consumed by clients of the REST proxy. Additionally, this RPC expects the destination\'s public key and the payment hash (if any) to be encoded as hex strings.
     */
    sendPaymentSync(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendPaymentSyncRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SendToRouteSync is a synchronous version of SendToRoute. It Will block until the payment either fails or succeeds.
     */
    sendToRouteSyncRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling sendToRouteSync.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/transactions/route`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcSendToRouteRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcSendResponseFromJSON(jsonValue));
        });
    }
    /**
     * SendToRouteSync is a synchronous version of SendToRoute. It Will block until the payment either fails or succeeds.
     */
    sendToRouteSync(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendToRouteSyncRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `signmessage` SignMessage signs a message with this node\'s private key. The returned signature string is `zbase32` encoded and pubkey recoverable, meaning that only the message digest and signature are needed for verification.
     */
    signMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling signMessage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/signmessage`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcSignMessageRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcSignMessageResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `signmessage` SignMessage signs a message with this node\'s private key. The returned signature string is `zbase32` encoded and pubkey recoverable, meaning that only the message digest and signature are needed for verification.
     */
    signMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.signMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `stop` StopDaemon will send a shutdown request to the interrupt handler, triggering a graceful shutdown of the daemon.
     */
    stopDaemonRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling stopDaemon.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/stop`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * lncli: `stop` StopDaemon will send a shutdown request to the interrupt handler, triggering a graceful shutdown of the daemon.
     */
    stopDaemon(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.stopDaemonRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SubscribeChannelBackups allows a client to sub-subscribe to the most up to date information concerning the state of all channel backups. Each time a new channel is added, we return the new set of channels, along with a multi-chan backup containing the backup info for all channels. Each time a channel is closed, we send a new update, which contains new new chan back ups, but the updated set of encrypted multi-chan backups with the closed channel(s) removed.
     */
    subscribeChannelBackupsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/backup/subscribe`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcChanBackupSnapshotFromJSON(jsonValue));
        });
    }
    /**
     * SubscribeChannelBackups allows a client to sub-subscribe to the most up to date information concerning the state of all channel backups. Each time a new channel is added, we return the new set of channels, along with a multi-chan backup containing the backup info for all channels. Each time a channel is closed, we send a new update, which contains new new chan back ups, but the updated set of encrypted multi-chan backups with the closed channel(s) removed.
     */
    subscribeChannelBackups(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeChannelBackupsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * SubscribeChannelEvents creates a uni-directional stream from the server to the client in which any updates relevant to the state of the channels are sent over. Events include new active channels, inactive channels, and closed channels.
     */
    subscribeChannelEventsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/channels/subscribe`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcChannelEventUpdateFromJSON(jsonValue));
        });
    }
    /**
     * SubscribeChannelEvents creates a uni-directional stream from the server to the client in which any updates relevant to the state of the channels are sent over. Events include new active channels, inactive channels, and closed channels.
     */
    subscribeChannelEvents(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeChannelEventsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * SubscribeChannelGraph launches a streaming RPC that allows the caller to receive notifications upon any changes to the channel graph topology from the point of view of the responding node. Events notified include: new nodes coming online, nodes updating their authenticated attributes, new channels being advertised, updates in the routing policy for a directional channel edge, and when channels are closed on-chain.
     */
    subscribeChannelGraphRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/graph/subscribe`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcGraphTopologyUpdateFromJSON(jsonValue));
        });
    }
    /**
     * SubscribeChannelGraph launches a streaming RPC that allows the caller to receive notifications upon any changes to the channel graph topology from the point of view of the responding node. Events notified include: new nodes coming online, nodes updating their authenticated attributes, new channels being advertised, updates in the routing policy for a directional channel edge, and when channels are closed on-chain.
     */
    subscribeChannelGraph(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeChannelGraphRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * SubscribeInvoices returns a uni-directional stream (server -> client) for notifying the client of newly added/settled invoices. The caller can optionally specify the add_index and/or the settle_index. If the add_index is specified, then we\'ll first start by sending add invoice events for all invoices with an add_index greater than the specified value. If the settle_index is specified, the next, we\'ll send out all settle events for invoices with a settle_index greater than the specified value. One or both of these fields can be set. If no fields are set, then we\'ll only send out the latest add/settle events.
     */
    subscribeInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.add_index !== undefined) {
                queryParameters['add_index'] = requestParameters.add_index;
            }
            if (requestParameters.settle_index !== undefined) {
                queryParameters['settle_index'] = requestParameters.settle_index;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/invoices/subscribe`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcInvoiceFromJSON(jsonValue));
        });
    }
    /**
     * SubscribeInvoices returns a uni-directional stream (server -> client) for notifying the client of newly added/settled invoices. The caller can optionally specify the add_index and/or the settle_index. If the add_index is specified, then we\'ll first start by sending add invoice events for all invoices with an add_index greater than the specified value. If the settle_index is specified, the next, we\'ll send out all settle events for invoices with a settle_index greater than the specified value. One or both of these fields can be set. If no fields are set, then we\'ll only send out the latest add/settle events.
     */
    subscribeInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SubscribePeerEvents creates a uni-directional stream from the server to the client in which any events relevant to the state of peers are sent over. Events include peers going online and offline.
     */
    subscribePeerEventsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/peers/subscribe`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcPeerEventFromJSON(jsonValue));
        });
    }
    /**
     * SubscribePeerEvents creates a uni-directional stream from the server to the client in which any events relevant to the state of peers are sent over. Events include peers going online and offline.
     */
    subscribePeerEvents(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribePeerEventsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * SubscribeTransactions creates a uni-directional stream from the server to the client in which any newly discovered transactions relevant to the wallet are sent over.
     */
    subscribeTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.start_height !== undefined) {
                queryParameters['start_height'] = requestParameters.start_height;
            }
            if (requestParameters.end_height !== undefined) {
                queryParameters['end_height'] = requestParameters.end_height;
            }
            if (requestParameters.account !== undefined) {
                queryParameters['account'] = requestParameters.account;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/transactions/subscribe`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StreamResultOfLnrpcTransactionFromJSON(jsonValue));
        });
    }
    /**
     * SubscribeTransactions creates a uni-directional stream from the server to the client in which any newly discovered transactions relevant to the wallet are sent over.
     */
    subscribeTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `updatechanpolicy` UpdateChannelPolicy allows the caller to update the fee schedule and channel policies for all channels globally, or a particular channel.
     */
    updateChannelPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateChannelPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/chanpolicy`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcPolicyUpdateRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * lncli: `updatechanpolicy` UpdateChannelPolicy allows the caller to update the fee schedule and channel policies for all channels globally, or a particular channel.
     */
    updateChannelPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateChannelPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * VerifyChanBackup allows a caller to verify the integrity of a channel backup snapshot. This method will accept either a packed Single or a packed Multi. Specifying both will result in an error.
     */
    verifyChanBackupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling verifyChanBackup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/channels/backup/verify`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcChanBackupSnapshotToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * VerifyChanBackup allows a caller to verify the integrity of a channel backup snapshot. This method will accept either a packed Single or a packed Multi. Specifying both will result in an error.
     */
    verifyChanBackup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.verifyChanBackupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `verifymessage` VerifyMessage verifies a signature over a msg. The signature must be zbase32 encoded and signed by an active node in the resident node\'s channel database. In addition to returning the validity of the signature, VerifyMessage also returns the recovered pubkey from the signature.
     */
    verifyMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling verifyMessage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v1/verifymessage`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LnrpcVerifyMessageRequestToJSON(requestParameters.body),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcVerifyMessageResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `verifymessage` VerifyMessage verifies a signature over a msg. The signature must be zbase32 encoded and signed by an active node in the resident node\'s channel database. In addition to returning the validity of the signature, VerifyMessage also returns the recovered pubkey from the signature.
     */
    verifyMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.verifyMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * lncli: `walletbalance` WalletBalance returns total unspent outputs(confirmed and unconfirmed), all confirmed unspent outputs and all unconfirmed unspent outputs under control of the wallet.
     */
    walletBalanceRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/balance/blockchain`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LnrpcWalletBalanceResponseFromJSON(jsonValue));
        });
    }
    /**
     * lncli: `walletbalance` WalletBalance returns total unspent outputs(confirmed and unconfirmed), all confirmed unspent outputs and all unconfirmed unspent outputs under control of the wallet.
     */
    walletBalance(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.walletBalanceRaw(initOverrides);
            return yield response.value();
        });
    }
}
exports.LightningApi = LightningApi;
/**
    * @export
    * @enum {string}
    */
var GetNodeMetricsTypesEnum;
(function (GetNodeMetricsTypesEnum) {
    GetNodeMetricsTypesEnum["Unknown"] = "UNKNOWN";
    GetNodeMetricsTypesEnum["BetweennessCentrality"] = "BETWEENNESS_CENTRALITY";
})(GetNodeMetricsTypesEnum = exports.GetNodeMetricsTypesEnum || (exports.GetNodeMetricsTypesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NewAddressTypeEnum;
(function (NewAddressTypeEnum) {
    NewAddressTypeEnum["WitnessPubkeyHash"] = "WITNESS_PUBKEY_HASH";
    NewAddressTypeEnum["NestedPubkeyHash"] = "NESTED_PUBKEY_HASH";
    NewAddressTypeEnum["UnusedWitnessPubkeyHash"] = "UNUSED_WITNESS_PUBKEY_HASH";
    NewAddressTypeEnum["UnusedNestedPubkeyHash"] = "UNUSED_NESTED_PUBKEY_HASH";
})(NewAddressTypeEnum = exports.NewAddressTypeEnum || (exports.NewAddressTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var QueryRoutesDestFeaturesEnum;
(function (QueryRoutesDestFeaturesEnum) {
    QueryRoutesDestFeaturesEnum["DatalossProtectReq"] = "DATALOSS_PROTECT_REQ";
    QueryRoutesDestFeaturesEnum["DatalossProtectOpt"] = "DATALOSS_PROTECT_OPT";
    QueryRoutesDestFeaturesEnum["InitialRouingSync"] = "INITIAL_ROUING_SYNC";
    QueryRoutesDestFeaturesEnum["UpfrontShutdownScriptReq"] = "UPFRONT_SHUTDOWN_SCRIPT_REQ";
    QueryRoutesDestFeaturesEnum["UpfrontShutdownScriptOpt"] = "UPFRONT_SHUTDOWN_SCRIPT_OPT";
    QueryRoutesDestFeaturesEnum["GossipQueriesReq"] = "GOSSIP_QUERIES_REQ";
    QueryRoutesDestFeaturesEnum["GossipQueriesOpt"] = "GOSSIP_QUERIES_OPT";
    QueryRoutesDestFeaturesEnum["TlvOnionReq"] = "TLV_ONION_REQ";
    QueryRoutesDestFeaturesEnum["TlvOnionOpt"] = "TLV_ONION_OPT";
    QueryRoutesDestFeaturesEnum["ExtGossipQueriesReq"] = "EXT_GOSSIP_QUERIES_REQ";
    QueryRoutesDestFeaturesEnum["ExtGossipQueriesOpt"] = "EXT_GOSSIP_QUERIES_OPT";
    QueryRoutesDestFeaturesEnum["StaticRemoteKeyReq"] = "STATIC_REMOTE_KEY_REQ";
    QueryRoutesDestFeaturesEnum["StaticRemoteKeyOpt"] = "STATIC_REMOTE_KEY_OPT";
    QueryRoutesDestFeaturesEnum["PaymentAddrReq"] = "PAYMENT_ADDR_REQ";
    QueryRoutesDestFeaturesEnum["PaymentAddrOpt"] = "PAYMENT_ADDR_OPT";
    QueryRoutesDestFeaturesEnum["MppReq"] = "MPP_REQ";
    QueryRoutesDestFeaturesEnum["MppOpt"] = "MPP_OPT";
    QueryRoutesDestFeaturesEnum["WumboChannelsReq"] = "WUMBO_CHANNELS_REQ";
    QueryRoutesDestFeaturesEnum["WumboChannelsOpt"] = "WUMBO_CHANNELS_OPT";
    QueryRoutesDestFeaturesEnum["AnchorsReq"] = "ANCHORS_REQ";
    QueryRoutesDestFeaturesEnum["AnchorsOpt"] = "ANCHORS_OPT";
    QueryRoutesDestFeaturesEnum["AnchorsZeroFeeHtlcReq"] = "ANCHORS_ZERO_FEE_HTLC_REQ";
    QueryRoutesDestFeaturesEnum["AnchorsZeroFeeHtlcOpt"] = "ANCHORS_ZERO_FEE_HTLC_OPT";
    QueryRoutesDestFeaturesEnum["AmpReq"] = "AMP_REQ";
    QueryRoutesDestFeaturesEnum["AmpOpt"] = "AMP_OPT";
})(QueryRoutesDestFeaturesEnum = exports.QueryRoutesDestFeaturesEnum || (exports.QueryRoutesDestFeaturesEnum = {}));
