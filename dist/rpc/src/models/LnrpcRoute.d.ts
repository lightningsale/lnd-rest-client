/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LnrpcHop } from './';
/**
 * A path through the channel graph which runs over one or more channels in
 * succession. This struct carries all the information required to craft the
 * Sphinx onion packet, and send the payment along the first hop in the path. A
 * route is only selected as valid if all the channels have sufficient capacity to
 * carry the initial payment amount after fees are accounted for.
 * @export
 * @interface LnrpcRoute
 */
export interface LnrpcRoute {
    /**
     * The cumulative (final) time lock across the entire route. This is the CLTV
     * value that should be extended to the first hop in the route. All other hops
     * will decrement the time-lock as advertised, leaving enough time for all
     * hops to wait for or present the payment preimage to complete the payment.
     * @type {number}
     * @memberof LnrpcRoute
     */
    totalTimeLock?: number;
    /**
     * The sum of the fees paid at each hop within the final route. In the case
     * of a one-hop payment, this value will be zero as we don't need to pay a fee
     * to ourselves.
     * @type {string}
     * @memberof LnrpcRoute
     */
    totalFees?: string;
    /**
     * The total amount of funds required to complete a payment over this route.
     * This value includes the cumulative fees at each hop. As a result, the HTLC
     * extended to the first-hop in the route will need to have at least this many
     * satoshis, otherwise the route will fail at an intermediate node due to an
     * insufficient amount of fees.
     * @type {string}
     * @memberof LnrpcRoute
     */
    totalAmt?: string;
    /**
     * Contains details concerning the specific forwarding details at each hop.
     * @type {Array<LnrpcHop>}
     * @memberof LnrpcRoute
     */
    hops?: Array<LnrpcHop>;
    /**
     * The total fees in millisatoshis.
     * @type {string}
     * @memberof LnrpcRoute
     */
    totalFeesMsat?: string;
    /**
     * The total amount in millisatoshis.
     * @type {string}
     * @memberof LnrpcRoute
     */
    totalAmtMsat?: string;
}
export declare function LnrpcRouteFromJSON(json: any): LnrpcRoute;
export declare function LnrpcRouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcRoute;
export declare function LnrpcRouteToJSON(value?: LnrpcRoute | null): any;
