/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LnrpcFundingShim } from './';
/**
 *
 * @export
 * @interface LnrpcOpenChannelRequest
 */
export interface LnrpcOpenChannelRequest {
    /**
     * A manual fee rate set in sat/vbyte that should be used when crafting the
     * funding transaction.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    satPerVbyte?: string;
    /**
     * The pubkey of the node to open a channel with. When using REST, this field
     * must be encoded as base64.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    nodePubkey?: string;
    /**
     * The hex encoded pubkey of the node to open a channel with. Deprecated now
     * that the REST gateway supports base64 encoding of bytes fields.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    nodePubkeyString?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    localFundingAmount?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    pushSat?: string;
    /**
     * The target number of blocks that the funding transaction should be
     * confirmed by.
     * @type {number}
     * @memberof LnrpcOpenChannelRequest
     */
    targetConf?: number;
    /**
     * Deprecated, use sat_per_vbyte.
     * A manual fee rate set in sat/vbyte that should be used when crafting the
     * funding transaction.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    satPerByte?: string;
    /**
     * Whether this channel should be private, not announced to the greater
     * network.
     * @type {boolean}
     * @memberof LnrpcOpenChannelRequest
     */
    _private?: boolean;
    /**
     * The minimum value in millisatoshi we will require for incoming HTLCs on
     * the channel.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    minHtlcMsat?: string;
    /**
     * The delay we require on the remote's commitment transaction. If this is
     * not set, it will be scaled automatically with the channel size.
     * @type {number}
     * @memberof LnrpcOpenChannelRequest
     */
    remoteCsvDelay?: number;
    /**
     * The minimum number of confirmations each one of your outputs used for
     * the funding transaction must satisfy.
     * @type {number}
     * @memberof LnrpcOpenChannelRequest
     */
    minConfs?: number;
    /**
     * Whether unconfirmed outputs should be used as inputs for the funding
     * transaction.
     * @type {boolean}
     * @memberof LnrpcOpenChannelRequest
     */
    spendUnconfirmed?: boolean;
    /**
     * Close address is an optional address which specifies the address to which
     * funds should be paid out to upon cooperative close. This field may only be
     * set if the peer supports the option upfront feature bit (call listpeers
     * to check). The remote peer will only accept cooperative closes to this
     * address if it is set.
     *
     * Note: If this value is set on channel creation, you will *not* be able to
     * cooperatively close out to a different address.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    closeAddress?: string;
    /**
     *
     * @type {LnrpcFundingShim}
     * @memberof LnrpcOpenChannelRequest
     */
    fundingShim?: LnrpcFundingShim;
    /**
     * The maximum amount of coins in millisatoshi that can be pending within
     * the channel. It only applies to the remote party.
     * @type {string}
     * @memberof LnrpcOpenChannelRequest
     */
    remoteMaxValueInFlightMsat?: string;
    /**
     * The maximum number of concurrent HTLCs we will allow the remote party to add
     * to the commitment transaction.
     * @type {number}
     * @memberof LnrpcOpenChannelRequest
     */
    remoteMaxHtlcs?: number;
    /**
     * Max local csv is the maximum csv delay we will allow for our own commitment
     * transaction.
     * @type {number}
     * @memberof LnrpcOpenChannelRequest
     */
    maxLocalCsv?: number;
}
export declare function LnrpcOpenChannelRequestFromJSON(json: any): LnrpcOpenChannelRequest;
export declare function LnrpcOpenChannelRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcOpenChannelRequest;
export declare function LnrpcOpenChannelRequestToJSON(value?: LnrpcOpenChannelRequest | null): any;
