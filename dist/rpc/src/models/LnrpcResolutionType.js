"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *  - ANCHOR: We resolved an anchor output.
 *  - INCOMING_HTLC: We are resolving an incoming htlc on chain. This if this htlc is
 * claimed, we swept the incoming htlc with the preimage. If it is timed
 * out, our peer swept the timeout path.
 *  - OUTGOING_HTLC: We are resolving an outgoing htlc on chain. If this htlc is claimed,
 * the remote party swept the htlc with the preimage. If it is timed out,
 * we swept it with the timeout path.
 *  - COMMIT: We force closed and need to sweep our time locked commitment output.
 * @export
 * @enum {string}
 */
var LnrpcResolutionType;
(function (LnrpcResolutionType) {
    LnrpcResolutionType["TypeUnknown"] = "TYPE_UNKNOWN";
    LnrpcResolutionType["Anchor"] = "ANCHOR";
    LnrpcResolutionType["IncomingHtlc"] = "INCOMING_HTLC";
    LnrpcResolutionType["OutgoingHtlc"] = "OUTGOING_HTLC";
    LnrpcResolutionType["Commit"] = "COMMIT";
})(LnrpcResolutionType = exports.LnrpcResolutionType || (exports.LnrpcResolutionType = {}));
function LnrpcResolutionTypeFromJSON(json) {
    return LnrpcResolutionTypeFromJSONTyped(json, false);
}
exports.LnrpcResolutionTypeFromJSON = LnrpcResolutionTypeFromJSON;
function LnrpcResolutionTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
exports.LnrpcResolutionTypeFromJSONTyped = LnrpcResolutionTypeFromJSONTyped;
function LnrpcResolutionTypeToJSON(value) {
    return value;
}
exports.LnrpcResolutionTypeToJSON = LnrpcResolutionTypeToJSON;
