/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LnrpcChannelConstraints, LnrpcCommitmentType, LnrpcHTLC } from './';
/**
 *
 * @export
 * @interface LnrpcChannel
 */
export interface LnrpcChannel {
    /**
     *
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof LnrpcChannel
     */
    remotePubkey?: string;
    /**
     * The outpoint (txid:index) of the funding transaction. With this value, Bob
     * will be able to generate a signature for Alice's version of the commitment
     * transaction.
     * @type {string}
     * @memberof LnrpcChannel
     */
    channelPoint?: string;
    /**
     * The unique channel ID for the channel. The first 3 bytes are the block
     * height, the next 3 the index within the block, and the last 2 bytes are the
     * output index for the channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    chanId?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcChannel
     */
    capacity?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcChannel
     */
    localBalance?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcChannel
     */
    remoteBalance?: string;
    /**
     * The amount calculated to be paid in fees for the current set of commitment
     * transactions. The fee amount is persisted with the channel in order to
     * allow the fee amount to be removed and recalculated with each channel state
     * update, including updates that happen after a system restart.
     * @type {string}
     * @memberof LnrpcChannel
     */
    commitFee?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcChannel
     */
    commitWeight?: string;
    /**
     * The required number of satoshis per kilo-weight that the requester will pay
     * at all times, for both the funding transaction and commitment transaction.
     * This value can later be updated once the channel is open.
     * @type {string}
     * @memberof LnrpcChannel
     */
    feePerKw?: string;
    /**
     *
     * @type {string}
     * @memberof LnrpcChannel
     */
    unsettledBalance?: string;
    /**
     * The total number of satoshis we've sent within this channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    totalSatoshisSent?: string;
    /**
     * The total number of satoshis we've received within this channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    totalSatoshisReceived?: string;
    /**
     * The total number of updates conducted within this channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    numUpdates?: string;
    /**
     * The list of active, uncleared HTLCs currently pending within the channel.
     * @type {Array<LnrpcHTLC>}
     * @memberof LnrpcChannel
     */
    pendingHtlcs?: Array<LnrpcHTLC>;
    /**
     * Deprecated. The CSV delay expressed in relative blocks. If the channel is
     * force closed, we will need to wait for this many blocks before we can regain
     * our funds.
     * @type {number}
     * @memberof LnrpcChannel
     */
    csvDelay?: number;
    /**
     * Whether this channel is advertised to the network or not.
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    _private?: boolean;
    /**
     * True if we were the ones that created the channel.
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    initiator?: boolean;
    /**
     * A set of flags showing the current state of the channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    chanStatusFlags?: string;
    /**
     * Deprecated. The minimum satoshis this node is required to reserve in its
     * balance.
     * @type {string}
     * @memberof LnrpcChannel
     */
    localChanReserveSat?: string;
    /**
     * Deprecated. The minimum satoshis the other node is required to reserve in
     * its balance.
     * @type {string}
     * @memberof LnrpcChannel
     */
    remoteChanReserveSat?: string;
    /**
     * Deprecated. Use commitment_type.
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    staticRemoteKey?: boolean;
    /**
     *
     * @type {LnrpcCommitmentType}
     * @memberof LnrpcChannel
     */
    commitmentType?: LnrpcCommitmentType;
    /**
     * The number of seconds that the channel has been monitored by the channel
     * scoring system. Scores are currently not persisted, so this value may be
     * less than the lifetime of the channel [EXPERIMENTAL].
     * @type {string}
     * @memberof LnrpcChannel
     */
    lifetime?: string;
    /**
     * The number of seconds that the remote peer has been observed as being online
     * by the channel scoring system over the lifetime of the channel
     * [EXPERIMENTAL].
     * @type {string}
     * @memberof LnrpcChannel
     */
    uptime?: string;
    /**
     * Close address is the address that we will enforce payout to on cooperative
     * close if the channel was opened utilizing option upfront shutdown. This
     * value can be set on channel open by setting close_address in an open channel
     * request. If this value is not set, you can still choose a payout address by
     * cooperatively closing with the delivery_address field set.
     * @type {string}
     * @memberof LnrpcChannel
     */
    closeAddress?: string;
    /**
     * The amount that the initiator of the channel optionally pushed to the remote
     * party on channel open. This amount will be zero if the channel initiator did
     * not push any funds to the remote peer. If the initiator field is true, we
     * pushed this amount to our peer, if it is false, the remote peer pushed this
     * amount to us.
     * @type {string}
     * @memberof LnrpcChannel
     */
    pushAmountSat?: string;
    /**
     * This uint32 indicates if this channel is to be considered 'frozen'. A
     * frozen channel doest not allow a cooperative channel close by the
     * initiator. The thaw_height is the height that this restriction stops
     * applying to the channel. This field is optional, not setting it or using a
     * value of zero will mean the channel has no additional restrictions. The
     * height can be interpreted in two ways: as a relative height if the value is
     * less than 500,000, or as an absolute height otherwise.
     * @type {number}
     * @memberof LnrpcChannel
     */
    thawHeight?: number;
    /**
     *
     * @type {LnrpcChannelConstraints}
     * @memberof LnrpcChannel
     */
    localConstraints?: LnrpcChannelConstraints;
    /**
     *
     * @type {LnrpcChannelConstraints}
     * @memberof LnrpcChannel
     */
    remoteConstraints?: LnrpcChannelConstraints;
}
export declare function LnrpcChannelFromJSON(json: any): LnrpcChannel;
export declare function LnrpcChannelFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannel;
export declare function LnrpcChannelToJSON(value?: LnrpcChannel | null): any;
