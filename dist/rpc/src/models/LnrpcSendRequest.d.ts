/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LnrpcFeatureBit, LnrpcFeeLimit } from './';
/**
 *
 * @export
 * @interface LnrpcSendRequest
 */
export interface LnrpcSendRequest {
    /**
     * The identity pubkey of the payment recipient. When using REST, this field
     * must be encoded as base64.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    dest?: string;
    /**
     * The hex-encoded identity pubkey of the payment recipient. Deprecated now
     * that the REST gateway supports base64 encoding of bytes fields.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    destString?: string;
    /**
     * The amount to send expressed in satoshis.
     *
     * The fields amt and amt_msat are mutually exclusive.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    amt?: string;
    /**
     * The amount to send expressed in millisatoshis.
     *
     * The fields amt and amt_msat are mutually exclusive.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    amtMsat?: string;
    /**
     * The hash to use within the payment's HTLC. When using REST, this field
     * must be encoded as base64.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentHash?: string;
    /**
     * The hex-encoded hash to use within the payment's HTLC. Deprecated now
     * that the REST gateway supports base64 encoding of bytes fields.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentHashString?: string;
    /**
     * A bare-bones invoice for a payment within the Lightning Network. With the
     * details of the invoice, the sender has all the data necessary to send a
     * payment to the recipient.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentRequest?: string;
    /**
     * The CLTV delta from the current height that should be used to set the
     * timelock for the final hop.
     * @type {number}
     * @memberof LnrpcSendRequest
     */
    finalCltvDelta?: number;
    /**
     *
     * @type {LnrpcFeeLimit}
     * @memberof LnrpcSendRequest
     */
    feeLimit?: LnrpcFeeLimit;
    /**
     * The channel id of the channel that must be taken to the first hop. If zero,
     * any channel may be used.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    outgoingChanId?: string;
    /**
     * The pubkey of the last hop of the route. If empty, any hop may be used.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    lastHopPubkey?: string;
    /**
     * An optional maximum total time lock for the route. This should not exceed
     * lnd's `--max-cltv-expiry` setting. If zero, then the value of
     * `--max-cltv-expiry` is enforced.
     * @type {number}
     * @memberof LnrpcSendRequest
     */
    cltvLimit?: number;
    /**
     * An optional field that can be used to pass an arbitrary set of TLV records
     * to a peer which understands the new records. This can be used to pass
     * application specific data during the payment attempt. Record types are
     * required to be in the custom range >= 65536. When using REST, the values
     * must be encoded as base64.
     * @type {{ [key: string]: string; }}
     * @memberof LnrpcSendRequest
     */
    destCustomRecords?: {
        [key: string]: string;
    };
    /**
     * If set, circular payments to self are permitted.
     * @type {boolean}
     * @memberof LnrpcSendRequest
     */
    allowSelfPayment?: boolean;
    /**
     * Features assumed to be supported by the final node. All transitive feature
     * dependencies must also be set properly. For a given feature bit pair, either
     * optional or remote may be set, but not both. If this field is nil or empty,
     * the router will try to load destination features from the graph as a
     * fallback.
     * @type {Array<LnrpcFeatureBit>}
     * @memberof LnrpcSendRequest
     */
    destFeatures?: Array<LnrpcFeatureBit>;
    /**
     * The payment address of the generated invoice.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentAddr?: string;
}
export declare function LnrpcSendRequestFromJSON(json: any): LnrpcSendRequest;
export declare function LnrpcSendRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcSendRequest;
export declare function LnrpcSendRequestToJSON(value?: LnrpcSendRequest | null): any;
