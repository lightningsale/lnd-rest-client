"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("../runtime");
const _1 = require("./");
function LnrpcClosedChannelUpdateFromJSON(json) {
    return LnrpcClosedChannelUpdateFromJSONTyped(json, false);
}
exports.LnrpcClosedChannelUpdateFromJSON = LnrpcClosedChannelUpdateFromJSON;
function LnrpcClosedChannelUpdateFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'chanId': !runtime_1.exists(json, 'chan_id') ? undefined : json['chan_id'],
        'capacity': !runtime_1.exists(json, 'capacity') ? undefined : json['capacity'],
        'closedHeight': !runtime_1.exists(json, 'closed_height') ? undefined : json['closed_height'],
        'chanPoint': !runtime_1.exists(json, 'chan_point') ? undefined : _1.LnrpcChannelPointFromJSON(json['chan_point']),
    };
}
exports.LnrpcClosedChannelUpdateFromJSONTyped = LnrpcClosedChannelUpdateFromJSONTyped;
function LnrpcClosedChannelUpdateToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'chan_id': value.chanId,
        'capacity': value.capacity,
        'closed_height': value.closedHeight,
        'chan_point': _1.LnrpcChannelPointToJSON(value.chanPoint),
    };
}
exports.LnrpcClosedChannelUpdateToJSON = LnrpcClosedChannelUpdateToJSON;
