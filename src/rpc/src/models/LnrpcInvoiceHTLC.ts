/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcAMP,
    LnrpcAMPFromJSON,
    LnrpcAMPFromJSONTyped,
    LnrpcAMPToJSON,
    LnrpcInvoiceHTLCState,
    LnrpcInvoiceHTLCStateFromJSON,
    LnrpcInvoiceHTLCStateFromJSONTyped,
    LnrpcInvoiceHTLCStateToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcInvoiceHTLC
 */
export interface LnrpcInvoiceHTLC {
    /**
     * Short channel id over which the htlc was received.
     * @type {string}
     * @memberof LnrpcInvoiceHTLC
     */
    chanId?: string;
    /**
     * Index identifying the htlc on the channel.
     * @type {string}
     * @memberof LnrpcInvoiceHTLC
     */
    htlcIndex?: string;
    /**
     * The amount of the htlc in msat.
     * @type {string}
     * @memberof LnrpcInvoiceHTLC
     */
    amtMsat?: string;
    /**
     * Block height at which this htlc was accepted.
     * @type {number}
     * @memberof LnrpcInvoiceHTLC
     */
    acceptHeight?: number;
    /**
     * Time at which this htlc was accepted.
     * @type {string}
     * @memberof LnrpcInvoiceHTLC
     */
    acceptTime?: string;
    /**
     * Time at which this htlc was settled or canceled.
     * @type {string}
     * @memberof LnrpcInvoiceHTLC
     */
    resolveTime?: string;
    /**
     * Block height at which this htlc expires.
     * @type {number}
     * @memberof LnrpcInvoiceHTLC
     */
    expiryHeight?: number;
    /**
     * 
     * @type {LnrpcInvoiceHTLCState}
     * @memberof LnrpcInvoiceHTLC
     */
    state?: LnrpcInvoiceHTLCState;
    /**
     * Custom tlv records.
     * @type {{ [key: string]: string; }}
     * @memberof LnrpcInvoiceHTLC
     */
    customRecords?: { [key: string]: string; };
    /**
     * The total amount of the mpp payment in msat.
     * @type {string}
     * @memberof LnrpcInvoiceHTLC
     */
    mppTotalAmtMsat?: string;
    /**
     * 
     * @type {LnrpcAMP}
     * @memberof LnrpcInvoiceHTLC
     */
    amp?: LnrpcAMP;
}

export function LnrpcInvoiceHTLCFromJSON(json: any): LnrpcInvoiceHTLC {
    return LnrpcInvoiceHTLCFromJSONTyped(json, false);
}

export function LnrpcInvoiceHTLCFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcInvoiceHTLC {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chanId': !exists(json, 'chan_id') ? undefined : json['chan_id'],
        'htlcIndex': !exists(json, 'htlc_index') ? undefined : json['htlc_index'],
        'amtMsat': !exists(json, 'amt_msat') ? undefined : json['amt_msat'],
        'acceptHeight': !exists(json, 'accept_height') ? undefined : json['accept_height'],
        'acceptTime': !exists(json, 'accept_time') ? undefined : json['accept_time'],
        'resolveTime': !exists(json, 'resolve_time') ? undefined : json['resolve_time'],
        'expiryHeight': !exists(json, 'expiry_height') ? undefined : json['expiry_height'],
        'state': !exists(json, 'state') ? undefined : LnrpcInvoiceHTLCStateFromJSON(json['state']),
        'customRecords': !exists(json, 'custom_records') ? undefined : json['custom_records'],
        'mppTotalAmtMsat': !exists(json, 'mpp_total_amt_msat') ? undefined : json['mpp_total_amt_msat'],
        'amp': !exists(json, 'amp') ? undefined : LnrpcAMPFromJSON(json['amp']),
    };
}

export function LnrpcInvoiceHTLCToJSON(value?: LnrpcInvoiceHTLC | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chan_id': value.chanId,
        'htlc_index': value.htlcIndex,
        'amt_msat': value.amtMsat,
        'accept_height': value.acceptHeight,
        'accept_time': value.acceptTime,
        'resolve_time': value.resolveTime,
        'expiry_height': value.expiryHeight,
        'state': LnrpcInvoiceHTLCStateToJSON(value.state),
        'custom_records': value.customRecords,
        'mpp_total_amt_msat': value.mppTotalAmtMsat,
        'amp': LnrpcAMPToJSON(value.amp),
    };
}

