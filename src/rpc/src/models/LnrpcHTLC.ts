/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LnrpcHTLC
 */
export interface LnrpcHTLC {
    /**
     * 
     * @type {boolean}
     * @memberof LnrpcHTLC
     */
    incoming?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LnrpcHTLC
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcHTLC
     */
    hashLock?: string;
    /**
     * 
     * @type {number}
     * @memberof LnrpcHTLC
     */
    expirationHeight?: number;
    /**
     * Index identifying the htlc on the channel.
     * @type {string}
     * @memberof LnrpcHTLC
     */
    htlcIndex?: string;
    /**
     * If this HTLC is involved in a forwarding operation, this field indicates
     * the forwarding channel. For an outgoing htlc, it is the incoming channel.
     * For an incoming htlc, it is the outgoing channel. When the htlc
     * originates from this node or this node is the final destination,
     * forwarding_channel will be zero. The forwarding channel will also be zero
     * for htlcs that need to be forwarded but don't have a forwarding decision
     * persisted yet.
     * @type {string}
     * @memberof LnrpcHTLC
     */
    forwardingChannel?: string;
    /**
     * Index identifying the htlc on the forwarding channel.
     * @type {string}
     * @memberof LnrpcHTLC
     */
    forwardingHtlcIndex?: string;
}

export function LnrpcHTLCFromJSON(json: any): LnrpcHTLC {
    return LnrpcHTLCFromJSONTyped(json, false);
}

export function LnrpcHTLCFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcHTLC {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'incoming': !exists(json, 'incoming') ? undefined : json['incoming'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'hashLock': !exists(json, 'hash_lock') ? undefined : json['hash_lock'],
        'expirationHeight': !exists(json, 'expiration_height') ? undefined : json['expiration_height'],
        'htlcIndex': !exists(json, 'htlc_index') ? undefined : json['htlc_index'],
        'forwardingChannel': !exists(json, 'forwarding_channel') ? undefined : json['forwarding_channel'],
        'forwardingHtlcIndex': !exists(json, 'forwarding_htlc_index') ? undefined : json['forwarding_htlc_index'],
    };
}

export function LnrpcHTLCToJSON(value?: LnrpcHTLC | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'incoming': value.incoming,
        'amount': value.amount,
        'hash_lock': value.hashLock,
        'expiration_height': value.expirationHeight,
        'htlc_index': value.htlcIndex,
        'forwarding_channel': value.forwardingChannel,
        'forwarding_htlc_index': value.forwardingHtlcIndex,
    };
}

