/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcFeatureBit,
    LnrpcFeatureBitFromJSON,
    LnrpcFeatureBitFromJSONTyped,
    LnrpcFeatureBitToJSON,
    LnrpcFeeLimit,
    LnrpcFeeLimitFromJSON,
    LnrpcFeeLimitFromJSONTyped,
    LnrpcFeeLimitToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcSendRequest
 */
export interface LnrpcSendRequest {
    /**
     * The identity pubkey of the payment recipient. When using REST, this field
     * must be encoded as base64.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    dest?: string;
    /**
     * The hex-encoded identity pubkey of the payment recipient. Deprecated now
     * that the REST gateway supports base64 encoding of bytes fields.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    destString?: string;
    /**
     * The amount to send expressed in satoshis.
     * 
     * The fields amt and amt_msat are mutually exclusive.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    amt?: string;
    /**
     * The amount to send expressed in millisatoshis.
     * 
     * The fields amt and amt_msat are mutually exclusive.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    amtMsat?: string;
    /**
     * The hash to use within the payment's HTLC. When using REST, this field
     * must be encoded as base64.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentHash?: string;
    /**
     * The hex-encoded hash to use within the payment's HTLC. Deprecated now
     * that the REST gateway supports base64 encoding of bytes fields.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentHashString?: string;
    /**
     * A bare-bones invoice for a payment within the Lightning Network. With the
     * details of the invoice, the sender has all the data necessary to send a
     * payment to the recipient.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentRequest?: string;
    /**
     * The CLTV delta from the current height that should be used to set the
     * timelock for the final hop.
     * @type {number}
     * @memberof LnrpcSendRequest
     */
    finalCltvDelta?: number;
    /**
     * 
     * @type {LnrpcFeeLimit}
     * @memberof LnrpcSendRequest
     */
    feeLimit?: LnrpcFeeLimit;
    /**
     * The channel id of the channel that must be taken to the first hop. If zero,
     * any channel may be used.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    outgoingChanId?: string;
    /**
     * The pubkey of the last hop of the route. If empty, any hop may be used.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    lastHopPubkey?: string;
    /**
     * An optional maximum total time lock for the route. This should not exceed
     * lnd's `--max-cltv-expiry` setting. If zero, then the value of
     * `--max-cltv-expiry` is enforced.
     * @type {number}
     * @memberof LnrpcSendRequest
     */
    cltvLimit?: number;
    /**
     * An optional field that can be used to pass an arbitrary set of TLV records
     * to a peer which understands the new records. This can be used to pass
     * application specific data during the payment attempt. Record types are
     * required to be in the custom range >= 65536. When using REST, the values
     * must be encoded as base64.
     * @type {{ [key: string]: string; }}
     * @memberof LnrpcSendRequest
     */
    destCustomRecords?: { [key: string]: string; };
    /**
     * If set, circular payments to self are permitted.
     * @type {boolean}
     * @memberof LnrpcSendRequest
     */
    allowSelfPayment?: boolean;
    /**
     * Features assumed to be supported by the final node. All transitive feature
     * dependencies must also be set properly. For a given feature bit pair, either
     * optional or remote may be set, but not both. If this field is nil or empty,
     * the router will try to load destination features from the graph as a
     * fallback.
     * @type {Array<LnrpcFeatureBit>}
     * @memberof LnrpcSendRequest
     */
    destFeatures?: Array<LnrpcFeatureBit>;
    /**
     * The payment address of the generated invoice.
     * @type {string}
     * @memberof LnrpcSendRequest
     */
    paymentAddr?: string;
}

export function LnrpcSendRequestFromJSON(json: any): LnrpcSendRequest {
    return LnrpcSendRequestFromJSONTyped(json, false);
}

export function LnrpcSendRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcSendRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dest': !exists(json, 'dest') ? undefined : json['dest'],
        'destString': !exists(json, 'dest_string') ? undefined : json['dest_string'],
        'amt': !exists(json, 'amt') ? undefined : json['amt'],
        'amtMsat': !exists(json, 'amt_msat') ? undefined : json['amt_msat'],
        'paymentHash': !exists(json, 'payment_hash') ? undefined : json['payment_hash'],
        'paymentHashString': !exists(json, 'payment_hash_string') ? undefined : json['payment_hash_string'],
        'paymentRequest': !exists(json, 'payment_request') ? undefined : json['payment_request'],
        'finalCltvDelta': !exists(json, 'final_cltv_delta') ? undefined : json['final_cltv_delta'],
        'feeLimit': !exists(json, 'fee_limit') ? undefined : LnrpcFeeLimitFromJSON(json['fee_limit']),
        'outgoingChanId': !exists(json, 'outgoing_chan_id') ? undefined : json['outgoing_chan_id'],
        'lastHopPubkey': !exists(json, 'last_hop_pubkey') ? undefined : json['last_hop_pubkey'],
        'cltvLimit': !exists(json, 'cltv_limit') ? undefined : json['cltv_limit'],
        'destCustomRecords': !exists(json, 'dest_custom_records') ? undefined : json['dest_custom_records'],
        'allowSelfPayment': !exists(json, 'allow_self_payment') ? undefined : json['allow_self_payment'],
        'destFeatures': !exists(json, 'dest_features') ? undefined : ((json['dest_features'] as Array<any>).map(LnrpcFeatureBitFromJSON)),
        'paymentAddr': !exists(json, 'payment_addr') ? undefined : json['payment_addr'],
    };
}

export function LnrpcSendRequestToJSON(value?: LnrpcSendRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dest': value.dest,
        'dest_string': value.destString,
        'amt': value.amt,
        'amt_msat': value.amtMsat,
        'payment_hash': value.paymentHash,
        'payment_hash_string': value.paymentHashString,
        'payment_request': value.paymentRequest,
        'final_cltv_delta': value.finalCltvDelta,
        'fee_limit': LnrpcFeeLimitToJSON(value.feeLimit),
        'outgoing_chan_id': value.outgoingChanId,
        'last_hop_pubkey': value.lastHopPubkey,
        'cltv_limit': value.cltvLimit,
        'dest_custom_records': value.destCustomRecords,
        'allow_self_payment': value.allowSelfPayment,
        'dest_features': value.destFeatures === undefined ? undefined : ((value.destFeatures as Array<any>).map(LnrpcFeatureBitToJSON)),
        'payment_addr': value.paymentAddr,
    };
}

