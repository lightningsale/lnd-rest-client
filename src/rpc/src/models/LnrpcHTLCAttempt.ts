/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    HTLCAttemptHTLCStatus,
    HTLCAttemptHTLCStatusFromJSON,
    HTLCAttemptHTLCStatusFromJSONTyped,
    HTLCAttemptHTLCStatusToJSON,
    LnrpcFailure,
    LnrpcFailureFromJSON,
    LnrpcFailureFromJSONTyped,
    LnrpcFailureToJSON,
    LnrpcRoute,
    LnrpcRouteFromJSON,
    LnrpcRouteFromJSONTyped,
    LnrpcRouteToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcHTLCAttempt
 */
export interface LnrpcHTLCAttempt {
    /**
     * The unique ID that is used for this attempt.
     * @type {string}
     * @memberof LnrpcHTLCAttempt
     */
    attemptId?: string;
    /**
     * 
     * @type {HTLCAttemptHTLCStatus}
     * @memberof LnrpcHTLCAttempt
     */
    status?: HTLCAttemptHTLCStatus;
    /**
     * 
     * @type {LnrpcRoute}
     * @memberof LnrpcHTLCAttempt
     */
    route?: LnrpcRoute;
    /**
     * The time in UNIX nanoseconds at which this HTLC was sent.
     * @type {string}
     * @memberof LnrpcHTLCAttempt
     */
    attemptTimeNs?: string;
    /**
     * The time in UNIX nanoseconds at which this HTLC was settled or failed.
     * This value will not be set if the HTLC is still IN_FLIGHT.
     * @type {string}
     * @memberof LnrpcHTLCAttempt
     */
    resolveTimeNs?: string;
    /**
     * 
     * @type {LnrpcFailure}
     * @memberof LnrpcHTLCAttempt
     */
    failure?: LnrpcFailure;
    /**
     * The preimage that was used to settle the HTLC.
     * @type {string}
     * @memberof LnrpcHTLCAttempt
     */
    preimage?: string;
}

export function LnrpcHTLCAttemptFromJSON(json: any): LnrpcHTLCAttempt {
    return LnrpcHTLCAttemptFromJSONTyped(json, false);
}

export function LnrpcHTLCAttemptFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcHTLCAttempt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attemptId': !exists(json, 'attempt_id') ? undefined : json['attempt_id'],
        'status': !exists(json, 'status') ? undefined : HTLCAttemptHTLCStatusFromJSON(json['status']),
        'route': !exists(json, 'route') ? undefined : LnrpcRouteFromJSON(json['route']),
        'attemptTimeNs': !exists(json, 'attempt_time_ns') ? undefined : json['attempt_time_ns'],
        'resolveTimeNs': !exists(json, 'resolve_time_ns') ? undefined : json['resolve_time_ns'],
        'failure': !exists(json, 'failure') ? undefined : LnrpcFailureFromJSON(json['failure']),
        'preimage': !exists(json, 'preimage') ? undefined : json['preimage'],
    };
}

export function LnrpcHTLCAttemptToJSON(value?: LnrpcHTLCAttempt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attempt_id': value.attemptId,
        'status': HTLCAttemptHTLCStatusToJSON(value.status),
        'route': LnrpcRouteToJSON(value.route),
        'attempt_time_ns': value.attemptTimeNs,
        'resolve_time_ns': value.resolveTimeNs,
        'failure': LnrpcFailureToJSON(value.failure),
        'preimage': value.preimage,
    };
}

