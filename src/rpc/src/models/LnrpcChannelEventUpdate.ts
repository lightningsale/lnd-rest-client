/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChannelEventUpdateUpdateType,
    ChannelEventUpdateUpdateTypeFromJSON,
    ChannelEventUpdateUpdateTypeFromJSONTyped,
    ChannelEventUpdateUpdateTypeToJSON,
    LnrpcChannel,
    LnrpcChannelFromJSON,
    LnrpcChannelFromJSONTyped,
    LnrpcChannelToJSON,
    LnrpcChannelCloseSummary,
    LnrpcChannelCloseSummaryFromJSON,
    LnrpcChannelCloseSummaryFromJSONTyped,
    LnrpcChannelCloseSummaryToJSON,
    LnrpcChannelPoint,
    LnrpcChannelPointFromJSON,
    LnrpcChannelPointFromJSONTyped,
    LnrpcChannelPointToJSON,
    LnrpcPendingUpdate,
    LnrpcPendingUpdateFromJSON,
    LnrpcPendingUpdateFromJSONTyped,
    LnrpcPendingUpdateToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcChannelEventUpdate
 */
export interface LnrpcChannelEventUpdate {
    /**
     * 
     * @type {LnrpcChannel}
     * @memberof LnrpcChannelEventUpdate
     */
    openChannel?: LnrpcChannel;
    /**
     * 
     * @type {LnrpcChannelCloseSummary}
     * @memberof LnrpcChannelEventUpdate
     */
    closedChannel?: LnrpcChannelCloseSummary;
    /**
     * 
     * @type {LnrpcChannelPoint}
     * @memberof LnrpcChannelEventUpdate
     */
    activeChannel?: LnrpcChannelPoint;
    /**
     * 
     * @type {LnrpcChannelPoint}
     * @memberof LnrpcChannelEventUpdate
     */
    inactiveChannel?: LnrpcChannelPoint;
    /**
     * 
     * @type {LnrpcPendingUpdate}
     * @memberof LnrpcChannelEventUpdate
     */
    pendingOpenChannel?: LnrpcPendingUpdate;
    /**
     * 
     * @type {ChannelEventUpdateUpdateType}
     * @memberof LnrpcChannelEventUpdate
     */
    type?: ChannelEventUpdateUpdateType;
}

export function LnrpcChannelEventUpdateFromJSON(json: any): LnrpcChannelEventUpdate {
    return LnrpcChannelEventUpdateFromJSONTyped(json, false);
}

export function LnrpcChannelEventUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannelEventUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'openChannel': !exists(json, 'open_channel') ? undefined : LnrpcChannelFromJSON(json['open_channel']),
        'closedChannel': !exists(json, 'closed_channel') ? undefined : LnrpcChannelCloseSummaryFromJSON(json['closed_channel']),
        'activeChannel': !exists(json, 'active_channel') ? undefined : LnrpcChannelPointFromJSON(json['active_channel']),
        'inactiveChannel': !exists(json, 'inactive_channel') ? undefined : LnrpcChannelPointFromJSON(json['inactive_channel']),
        'pendingOpenChannel': !exists(json, 'pending_open_channel') ? undefined : LnrpcPendingUpdateFromJSON(json['pending_open_channel']),
        'type': !exists(json, 'type') ? undefined : ChannelEventUpdateUpdateTypeFromJSON(json['type']),
    };
}

export function LnrpcChannelEventUpdateToJSON(value?: LnrpcChannelEventUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'open_channel': LnrpcChannelToJSON(value.openChannel),
        'closed_channel': LnrpcChannelCloseSummaryToJSON(value.closedChannel),
        'active_channel': LnrpcChannelPointToJSON(value.activeChannel),
        'inactive_channel': LnrpcChannelPointToJSON(value.inactiveChannel),
        'pending_open_channel': LnrpcPendingUpdateToJSON(value.pendingOpenChannel),
        'type': ChannelEventUpdateUpdateTypeToJSON(value.type),
    };
}

