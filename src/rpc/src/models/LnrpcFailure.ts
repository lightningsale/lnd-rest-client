/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FailureFailureCode,
    FailureFailureCodeFromJSON,
    FailureFailureCodeFromJSONTyped,
    FailureFailureCodeToJSON,
    LnrpcChannelUpdate,
    LnrpcChannelUpdateFromJSON,
    LnrpcChannelUpdateFromJSONTyped,
    LnrpcChannelUpdateToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcFailure
 */
export interface LnrpcFailure {
    /**
     * 
     * @type {FailureFailureCode}
     * @memberof LnrpcFailure
     */
    code?: FailureFailureCode;
    /**
     * 
     * @type {LnrpcChannelUpdate}
     * @memberof LnrpcFailure
     */
    channelUpdate?: LnrpcChannelUpdate;
    /**
     * A failure type-dependent htlc value.
     * @type {string}
     * @memberof LnrpcFailure
     */
    htlcMsat?: string;
    /**
     * The sha256 sum of the onion payload.
     * @type {string}
     * @memberof LnrpcFailure
     */
    onionSha256?: string;
    /**
     * A failure type-dependent cltv expiry value.
     * @type {number}
     * @memberof LnrpcFailure
     */
    cltvExpiry?: number;
    /**
     * A failure type-dependent flags value.
     * @type {number}
     * @memberof LnrpcFailure
     */
    flags?: number;
    /**
     * The position in the path of the intermediate or final node that generated
     * the failure message. Position zero is the sender node.
     * @type {number}
     * @memberof LnrpcFailure
     */
    failureSourceIndex?: number;
    /**
     * A failure type-dependent block height.
     * @type {number}
     * @memberof LnrpcFailure
     */
    height?: number;
}

export function LnrpcFailureFromJSON(json: any): LnrpcFailure {
    return LnrpcFailureFromJSONTyped(json, false);
}

export function LnrpcFailureFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcFailure {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : FailureFailureCodeFromJSON(json['code']),
        'channelUpdate': !exists(json, 'channel_update') ? undefined : LnrpcChannelUpdateFromJSON(json['channel_update']),
        'htlcMsat': !exists(json, 'htlc_msat') ? undefined : json['htlc_msat'],
        'onionSha256': !exists(json, 'onion_sha_256') ? undefined : json['onion_sha_256'],
        'cltvExpiry': !exists(json, 'cltv_expiry') ? undefined : json['cltv_expiry'],
        'flags': !exists(json, 'flags') ? undefined : json['flags'],
        'failureSourceIndex': !exists(json, 'failure_source_index') ? undefined : json['failure_source_index'],
        'height': !exists(json, 'height') ? undefined : json['height'],
    };
}

export function LnrpcFailureToJSON(value?: LnrpcFailure | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': FailureFailureCodeToJSON(value.code),
        'channel_update': LnrpcChannelUpdateToJSON(value.channelUpdate),
        'htlc_msat': value.htlcMsat,
        'onion_sha_256': value.onionSha256,
        'cltv_expiry': value.cltvExpiry,
        'flags': value.flags,
        'failure_source_index': value.failureSourceIndex,
        'height': value.height,
    };
}

