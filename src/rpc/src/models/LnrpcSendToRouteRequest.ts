/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcRoute,
    LnrpcRouteFromJSON,
    LnrpcRouteFromJSONTyped,
    LnrpcRouteToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcSendToRouteRequest
 */
export interface LnrpcSendToRouteRequest {
    /**
     * The payment hash to use for the HTLC. When using REST, this field must be
     * encoded as base64.
     * @type {string}
     * @memberof LnrpcSendToRouteRequest
     */
    paymentHash?: string;
    /**
     * An optional hex-encoded payment hash to be used for the HTLC. Deprecated now
     * that the REST gateway supports base64 encoding of bytes fields.
     * @type {string}
     * @memberof LnrpcSendToRouteRequest
     */
    paymentHashString?: string;
    /**
     * 
     * @type {LnrpcRoute}
     * @memberof LnrpcSendToRouteRequest
     */
    route?: LnrpcRoute;
}

export function LnrpcSendToRouteRequestFromJSON(json: any): LnrpcSendToRouteRequest {
    return LnrpcSendToRouteRequestFromJSONTyped(json, false);
}

export function LnrpcSendToRouteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcSendToRouteRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'paymentHash': !exists(json, 'payment_hash') ? undefined : json['payment_hash'],
        'paymentHashString': !exists(json, 'payment_hash_string') ? undefined : json['payment_hash_string'],
        'route': !exists(json, 'route') ? undefined : LnrpcRouteFromJSON(json['route']),
    };
}

export function LnrpcSendToRouteRequestToJSON(value?: LnrpcSendToRouteRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'payment_hash': value.paymentHash,
        'payment_hash_string': value.paymentHashString,
        'route': LnrpcRouteToJSON(value.route),
    };
}

