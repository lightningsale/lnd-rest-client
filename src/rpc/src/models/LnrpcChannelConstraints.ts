/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LnrpcChannelConstraints
 */
export interface LnrpcChannelConstraints {
    /**
     * The CSV delay expressed in relative blocks. If the channel is force closed,
     * we will need to wait for this many blocks before we can regain our funds.
     * @type {number}
     * @memberof LnrpcChannelConstraints
     */
    csvDelay?: number;
    /**
     * The minimum satoshis this node is required to reserve in its balance.
     * @type {string}
     * @memberof LnrpcChannelConstraints
     */
    chanReserveSat?: string;
    /**
     * The dust limit (in satoshis) of the initiator's commitment tx.
     * @type {string}
     * @memberof LnrpcChannelConstraints
     */
    dustLimitSat?: string;
    /**
     * The maximum amount of coins in millisatoshis that can be pending in this
     * channel.
     * @type {string}
     * @memberof LnrpcChannelConstraints
     */
    maxPendingAmtMsat?: string;
    /**
     * The smallest HTLC in millisatoshis that the initiator will accept.
     * @type {string}
     * @memberof LnrpcChannelConstraints
     */
    minHtlcMsat?: string;
    /**
     * The total number of incoming HTLC's that the initiator will accept.
     * @type {number}
     * @memberof LnrpcChannelConstraints
     */
    maxAcceptedHtlcs?: number;
}

export function LnrpcChannelConstraintsFromJSON(json: any): LnrpcChannelConstraints {
    return LnrpcChannelConstraintsFromJSONTyped(json, false);
}

export function LnrpcChannelConstraintsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannelConstraints {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'csvDelay': !exists(json, 'csv_delay') ? undefined : json['csv_delay'],
        'chanReserveSat': !exists(json, 'chan_reserve_sat') ? undefined : json['chan_reserve_sat'],
        'dustLimitSat': !exists(json, 'dust_limit_sat') ? undefined : json['dust_limit_sat'],
        'maxPendingAmtMsat': !exists(json, 'max_pending_amt_msat') ? undefined : json['max_pending_amt_msat'],
        'minHtlcMsat': !exists(json, 'min_htlc_msat') ? undefined : json['min_htlc_msat'],
        'maxAcceptedHtlcs': !exists(json, 'max_accepted_htlcs') ? undefined : json['max_accepted_htlcs'],
    };
}

export function LnrpcChannelConstraintsToJSON(value?: LnrpcChannelConstraints | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'csv_delay': value.csvDelay,
        'chan_reserve_sat': value.chanReserveSat,
        'dust_limit_sat': value.dustLimitSat,
        'max_pending_amt_msat': value.maxPendingAmtMsat,
        'min_htlc_msat': value.minHtlcMsat,
        'max_accepted_htlcs': value.maxAcceptedHtlcs,
    };
}

