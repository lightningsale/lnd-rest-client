/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcFeature,
    LnrpcFeatureFromJSON,
    LnrpcFeatureFromJSONTyped,
    LnrpcFeatureToJSON,
    LnrpcNodeAddress,
    LnrpcNodeAddressFromJSON,
    LnrpcNodeAddressFromJSONTyped,
    LnrpcNodeAddressToJSON,
} from './';

/**
 * An individual vertex/node within the channel graph. A node is
 * connected to other nodes by one or more channel edges emanating from it. As the
 * graph is directed, a node will also have an incoming edge attached to it for
 * each outgoing edge.
 * @export
 * @interface LnrpcLightningNode
 */
export interface LnrpcLightningNode {
    /**
     * 
     * @type {number}
     * @memberof LnrpcLightningNode
     */
    lastUpdate?: number;
    /**
     * 
     * @type {string}
     * @memberof LnrpcLightningNode
     */
    pubKey?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcLightningNode
     */
    alias?: string;
    /**
     * 
     * @type {Array<LnrpcNodeAddress>}
     * @memberof LnrpcLightningNode
     */
    addresses?: Array<LnrpcNodeAddress>;
    /**
     * 
     * @type {string}
     * @memberof LnrpcLightningNode
     */
    color?: string;
    /**
     * 
     * @type {{ [key: string]: LnrpcFeature; }}
     * @memberof LnrpcLightningNode
     */
    features?: { [key: string]: LnrpcFeature; };
}

export function LnrpcLightningNodeFromJSON(json: any): LnrpcLightningNode {
    return LnrpcLightningNodeFromJSONTyped(json, false);
}

export function LnrpcLightningNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcLightningNode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'lastUpdate': !exists(json, 'last_update') ? undefined : json['last_update'],
        'pubKey': !exists(json, 'pub_key') ? undefined : json['pub_key'],
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(LnrpcNodeAddressFromJSON)),
        'color': !exists(json, 'color') ? undefined : json['color'],
        'features': !exists(json, 'features') ? undefined : (mapValues(json['features'], LnrpcFeatureFromJSON)),
    };
}

export function LnrpcLightningNodeToJSON(value?: LnrpcLightningNode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'last_update': value.lastUpdate,
        'pub_key': value.pubKey,
        'alias': value.alias,
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(LnrpcNodeAddressToJSON)),
        'color': value.color,
        'features': value.features === undefined ? undefined : (mapValues(value.features, LnrpcFeatureToJSON)),
    };
}

