/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelPoint,
    LnrpcChannelPointFromJSON,
    LnrpcChannelPointFromJSONTyped,
    LnrpcChannelPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcClosedChannelUpdate
 */
export interface LnrpcClosedChannelUpdate {
    /**
     * The unique channel ID for the channel. The first 3 bytes are the block
     * height, the next 3 the index within the block, and the last 2 bytes are the
     * output index for the channel.
     * @type {string}
     * @memberof LnrpcClosedChannelUpdate
     */
    chanId?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcClosedChannelUpdate
     */
    capacity?: string;
    /**
     * 
     * @type {number}
     * @memberof LnrpcClosedChannelUpdate
     */
    closedHeight?: number;
    /**
     * 
     * @type {LnrpcChannelPoint}
     * @memberof LnrpcClosedChannelUpdate
     */
    chanPoint?: LnrpcChannelPoint;
}

export function LnrpcClosedChannelUpdateFromJSON(json: any): LnrpcClosedChannelUpdate {
    return LnrpcClosedChannelUpdateFromJSONTyped(json, false);
}

export function LnrpcClosedChannelUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcClosedChannelUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chanId': !exists(json, 'chan_id') ? undefined : json['chan_id'],
        'capacity': !exists(json, 'capacity') ? undefined : json['capacity'],
        'closedHeight': !exists(json, 'closed_height') ? undefined : json['closed_height'],
        'chanPoint': !exists(json, 'chan_point') ? undefined : LnrpcChannelPointFromJSON(json['chan_point']),
    };
}

export function LnrpcClosedChannelUpdateToJSON(value?: LnrpcClosedChannelUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chan_id': value.chanId,
        'capacity': value.capacity,
        'closed_height': value.closedHeight,
        'chan_point': LnrpcChannelPointToJSON(value.chanPoint),
    };
}

