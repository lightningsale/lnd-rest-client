/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelConstraints,
    LnrpcChannelConstraintsFromJSON,
    LnrpcChannelConstraintsFromJSONTyped,
    LnrpcChannelConstraintsToJSON,
    LnrpcCommitmentType,
    LnrpcCommitmentTypeFromJSON,
    LnrpcCommitmentTypeFromJSONTyped,
    LnrpcCommitmentTypeToJSON,
    LnrpcHTLC,
    LnrpcHTLCFromJSON,
    LnrpcHTLCFromJSONTyped,
    LnrpcHTLCToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcChannel
 */
export interface LnrpcChannel {
    /**
     * 
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannel
     */
    remotePubkey?: string;
    /**
     * The outpoint (txid:index) of the funding transaction. With this value, Bob
     * will be able to generate a signature for Alice's version of the commitment
     * transaction.
     * @type {string}
     * @memberof LnrpcChannel
     */
    channelPoint?: string;
    /**
     * The unique channel ID for the channel. The first 3 bytes are the block
     * height, the next 3 the index within the block, and the last 2 bytes are the
     * output index for the channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    chanId?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannel
     */
    capacity?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannel
     */
    localBalance?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannel
     */
    remoteBalance?: string;
    /**
     * The amount calculated to be paid in fees for the current set of commitment
     * transactions. The fee amount is persisted with the channel in order to
     * allow the fee amount to be removed and recalculated with each channel state
     * update, including updates that happen after a system restart.
     * @type {string}
     * @memberof LnrpcChannel
     */
    commitFee?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannel
     */
    commitWeight?: string;
    /**
     * The required number of satoshis per kilo-weight that the requester will pay
     * at all times, for both the funding transaction and commitment transaction.
     * This value can later be updated once the channel is open.
     * @type {string}
     * @memberof LnrpcChannel
     */
    feePerKw?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannel
     */
    unsettledBalance?: string;
    /**
     * The total number of satoshis we've sent within this channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    totalSatoshisSent?: string;
    /**
     * The total number of satoshis we've received within this channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    totalSatoshisReceived?: string;
    /**
     * The total number of updates conducted within this channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    numUpdates?: string;
    /**
     * The list of active, uncleared HTLCs currently pending within the channel.
     * @type {Array<LnrpcHTLC>}
     * @memberof LnrpcChannel
     */
    pendingHtlcs?: Array<LnrpcHTLC>;
    /**
     * Deprecated. The CSV delay expressed in relative blocks. If the channel is
     * force closed, we will need to wait for this many blocks before we can regain
     * our funds.
     * @type {number}
     * @memberof LnrpcChannel
     */
    csvDelay?: number;
    /**
     * Whether this channel is advertised to the network or not.
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    _private?: boolean;
    /**
     * True if we were the ones that created the channel.
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    initiator?: boolean;
    /**
     * A set of flags showing the current state of the channel.
     * @type {string}
     * @memberof LnrpcChannel
     */
    chanStatusFlags?: string;
    /**
     * Deprecated. The minimum satoshis this node is required to reserve in its
     * balance.
     * @type {string}
     * @memberof LnrpcChannel
     */
    localChanReserveSat?: string;
    /**
     * Deprecated. The minimum satoshis the other node is required to reserve in
     * its balance.
     * @type {string}
     * @memberof LnrpcChannel
     */
    remoteChanReserveSat?: string;
    /**
     * Deprecated. Use commitment_type.
     * @type {boolean}
     * @memberof LnrpcChannel
     */
    staticRemoteKey?: boolean;
    /**
     * 
     * @type {LnrpcCommitmentType}
     * @memberof LnrpcChannel
     */
    commitmentType?: LnrpcCommitmentType;
    /**
     * The number of seconds that the channel has been monitored by the channel
     * scoring system. Scores are currently not persisted, so this value may be
     * less than the lifetime of the channel [EXPERIMENTAL].
     * @type {string}
     * @memberof LnrpcChannel
     */
    lifetime?: string;
    /**
     * The number of seconds that the remote peer has been observed as being online
     * by the channel scoring system over the lifetime of the channel
     * [EXPERIMENTAL].
     * @type {string}
     * @memberof LnrpcChannel
     */
    uptime?: string;
    /**
     * Close address is the address that we will enforce payout to on cooperative
     * close if the channel was opened utilizing option upfront shutdown. This
     * value can be set on channel open by setting close_address in an open channel
     * request. If this value is not set, you can still choose a payout address by
     * cooperatively closing with the delivery_address field set.
     * @type {string}
     * @memberof LnrpcChannel
     */
    closeAddress?: string;
    /**
     * The amount that the initiator of the channel optionally pushed to the remote
     * party on channel open. This amount will be zero if the channel initiator did
     * not push any funds to the remote peer. If the initiator field is true, we
     * pushed this amount to our peer, if it is false, the remote peer pushed this
     * amount to us.
     * @type {string}
     * @memberof LnrpcChannel
     */
    pushAmountSat?: string;
    /**
     * This uint32 indicates if this channel is to be considered 'frozen'. A
     * frozen channel doest not allow a cooperative channel close by the
     * initiator. The thaw_height is the height that this restriction stops
     * applying to the channel. This field is optional, not setting it or using a
     * value of zero will mean the channel has no additional restrictions. The
     * height can be interpreted in two ways: as a relative height if the value is
     * less than 500,000, or as an absolute height otherwise.
     * @type {number}
     * @memberof LnrpcChannel
     */
    thawHeight?: number;
    /**
     * 
     * @type {LnrpcChannelConstraints}
     * @memberof LnrpcChannel
     */
    localConstraints?: LnrpcChannelConstraints;
    /**
     * 
     * @type {LnrpcChannelConstraints}
     * @memberof LnrpcChannel
     */
    remoteConstraints?: LnrpcChannelConstraints;
}

export function LnrpcChannelFromJSON(json: any): LnrpcChannel {
    return LnrpcChannelFromJSONTyped(json, false);
}

export function LnrpcChannelFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'remotePubkey': !exists(json, 'remote_pubkey') ? undefined : json['remote_pubkey'],
        'channelPoint': !exists(json, 'channel_point') ? undefined : json['channel_point'],
        'chanId': !exists(json, 'chan_id') ? undefined : json['chan_id'],
        'capacity': !exists(json, 'capacity') ? undefined : json['capacity'],
        'localBalance': !exists(json, 'local_balance') ? undefined : json['local_balance'],
        'remoteBalance': !exists(json, 'remote_balance') ? undefined : json['remote_balance'],
        'commitFee': !exists(json, 'commit_fee') ? undefined : json['commit_fee'],
        'commitWeight': !exists(json, 'commit_weight') ? undefined : json['commit_weight'],
        'feePerKw': !exists(json, 'fee_per_kw') ? undefined : json['fee_per_kw'],
        'unsettledBalance': !exists(json, 'unsettled_balance') ? undefined : json['unsettled_balance'],
        'totalSatoshisSent': !exists(json, 'total_satoshis_sent') ? undefined : json['total_satoshis_sent'],
        'totalSatoshisReceived': !exists(json, 'total_satoshis_received') ? undefined : json['total_satoshis_received'],
        'numUpdates': !exists(json, 'num_updates') ? undefined : json['num_updates'],
        'pendingHtlcs': !exists(json, 'pending_htlcs') ? undefined : ((json['pending_htlcs'] as Array<any>).map(LnrpcHTLCFromJSON)),
        'csvDelay': !exists(json, 'csv_delay') ? undefined : json['csv_delay'],
        '_private': !exists(json, 'private') ? undefined : json['private'],
        'initiator': !exists(json, 'initiator') ? undefined : json['initiator'],
        'chanStatusFlags': !exists(json, 'chan_status_flags') ? undefined : json['chan_status_flags'],
        'localChanReserveSat': !exists(json, 'local_chan_reserve_sat') ? undefined : json['local_chan_reserve_sat'],
        'remoteChanReserveSat': !exists(json, 'remote_chan_reserve_sat') ? undefined : json['remote_chan_reserve_sat'],
        'staticRemoteKey': !exists(json, 'static_remote_key') ? undefined : json['static_remote_key'],
        'commitmentType': !exists(json, 'commitment_type') ? undefined : LnrpcCommitmentTypeFromJSON(json['commitment_type']),
        'lifetime': !exists(json, 'lifetime') ? undefined : json['lifetime'],
        'uptime': !exists(json, 'uptime') ? undefined : json['uptime'],
        'closeAddress': !exists(json, 'close_address') ? undefined : json['close_address'],
        'pushAmountSat': !exists(json, 'push_amount_sat') ? undefined : json['push_amount_sat'],
        'thawHeight': !exists(json, 'thaw_height') ? undefined : json['thaw_height'],
        'localConstraints': !exists(json, 'local_constraints') ? undefined : LnrpcChannelConstraintsFromJSON(json['local_constraints']),
        'remoteConstraints': !exists(json, 'remote_constraints') ? undefined : LnrpcChannelConstraintsFromJSON(json['remote_constraints']),
    };
}

export function LnrpcChannelToJSON(value?: LnrpcChannel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'remote_pubkey': value.remotePubkey,
        'channel_point': value.channelPoint,
        'chan_id': value.chanId,
        'capacity': value.capacity,
        'local_balance': value.localBalance,
        'remote_balance': value.remoteBalance,
        'commit_fee': value.commitFee,
        'commit_weight': value.commitWeight,
        'fee_per_kw': value.feePerKw,
        'unsettled_balance': value.unsettledBalance,
        'total_satoshis_sent': value.totalSatoshisSent,
        'total_satoshis_received': value.totalSatoshisReceived,
        'num_updates': value.numUpdates,
        'pending_htlcs': value.pendingHtlcs === undefined ? undefined : ((value.pendingHtlcs as Array<any>).map(LnrpcHTLCToJSON)),
        'csv_delay': value.csvDelay,
        'private': value._private,
        'initiator': value.initiator,
        'chan_status_flags': value.chanStatusFlags,
        'local_chan_reserve_sat': value.localChanReserveSat,
        'remote_chan_reserve_sat': value.remoteChanReserveSat,
        'static_remote_key': value.staticRemoteKey,
        'commitment_type': LnrpcCommitmentTypeToJSON(value.commitmentType),
        'lifetime': value.lifetime,
        'uptime': value.uptime,
        'close_address': value.closeAddress,
        'push_amount_sat': value.pushAmountSat,
        'thaw_height': value.thawHeight,
        'local_constraints': LnrpcChannelConstraintsToJSON(value.localConstraints),
        'remote_constraints': LnrpcChannelConstraintsToJSON(value.remoteConstraints),
    };
}

