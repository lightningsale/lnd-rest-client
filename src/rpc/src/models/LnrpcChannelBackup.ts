/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelPoint,
    LnrpcChannelPointFromJSON,
    LnrpcChannelPointFromJSONTyped,
    LnrpcChannelPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcChannelBackup
 */
export interface LnrpcChannelBackup {
    /**
     * 
     * @type {LnrpcChannelPoint}
     * @memberof LnrpcChannelBackup
     */
    chanPoint?: LnrpcChannelPoint;
    /**
     * Is an encrypted single-chan backup. this can be passed to
     * RestoreChannelBackups, or the WalletUnlocker Init and Unlock methods in
     * order to trigger the recovery protocol. When using REST, this field must be
     * encoded as base64.
     * @type {string}
     * @memberof LnrpcChannelBackup
     */
    chanBackup?: string;
}

export function LnrpcChannelBackupFromJSON(json: any): LnrpcChannelBackup {
    return LnrpcChannelBackupFromJSONTyped(json, false);
}

export function LnrpcChannelBackupFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannelBackup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chanPoint': !exists(json, 'chan_point') ? undefined : LnrpcChannelPointFromJSON(json['chan_point']),
        'chanBackup': !exists(json, 'chan_backup') ? undefined : json['chan_backup'],
    };
}

export function LnrpcChannelBackupToJSON(value?: LnrpcChannelBackup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chan_point': LnrpcChannelPointToJSON(value.chanPoint),
        'chan_backup': value.chanBackup,
    };
}

