/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcFloatMetric,
    LnrpcFloatMetricFromJSON,
    LnrpcFloatMetricFromJSONTyped,
    LnrpcFloatMetricToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcNodeMetricsResponse
 */
export interface LnrpcNodeMetricsResponse {
    /**
     * Betweenness centrality is the sum of the ratio of shortest paths that pass
     * through the node for each pair of nodes in the graph (not counting paths
     * starting or ending at this node).
     * Map of node pubkey to betweenness centrality of the node. Normalized
     * values are in the [0,1] closed interval.
     * @type {{ [key: string]: LnrpcFloatMetric; }}
     * @memberof LnrpcNodeMetricsResponse
     */
    betweennessCentrality?: { [key: string]: LnrpcFloatMetric; };
}

export function LnrpcNodeMetricsResponseFromJSON(json: any): LnrpcNodeMetricsResponse {
    return LnrpcNodeMetricsResponseFromJSONTyped(json, false);
}

export function LnrpcNodeMetricsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcNodeMetricsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'betweennessCentrality': !exists(json, 'betweenness_centrality') ? undefined : (mapValues(json['betweenness_centrality'], LnrpcFloatMetricFromJSON)),
    };
}

export function LnrpcNodeMetricsResponseToJSON(value?: LnrpcNodeMetricsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'betweenness_centrality': value.betweennessCentrality === undefined ? undefined : (mapValues(value.betweennessCentrality, LnrpcFloatMetricToJSON)),
    };
}

