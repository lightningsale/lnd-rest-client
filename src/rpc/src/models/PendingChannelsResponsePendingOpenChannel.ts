/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PendingChannelsResponsePendingChannel,
    PendingChannelsResponsePendingChannelFromJSON,
    PendingChannelsResponsePendingChannelFromJSONTyped,
    PendingChannelsResponsePendingChannelToJSON,
} from './';

/**
 * 
 * @export
 * @interface PendingChannelsResponsePendingOpenChannel
 */
export interface PendingChannelsResponsePendingOpenChannel {
    /**
     * 
     * @type {PendingChannelsResponsePendingChannel}
     * @memberof PendingChannelsResponsePendingOpenChannel
     */
    channel?: PendingChannelsResponsePendingChannel;
    /**
     * 
     * @type {number}
     * @memberof PendingChannelsResponsePendingOpenChannel
     */
    confirmationHeight?: number;
    /**
     * The amount calculated to be paid in fees for the current set of
     * commitment transactions. The fee amount is persisted with the channel
     * in order to allow the fee amount to be removed and recalculated with
     * each channel state update, including updates that happen after a system
     * restart.
     * @type {string}
     * @memberof PendingChannelsResponsePendingOpenChannel
     */
    commitFee?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingChannelsResponsePendingOpenChannel
     */
    commitWeight?: string;
    /**
     * The required number of satoshis per kilo-weight that the requester will
     * pay at all times, for both the funding transaction and commitment
     * transaction. This value can later be updated once the channel is open.
     * @type {string}
     * @memberof PendingChannelsResponsePendingOpenChannel
     */
    feePerKw?: string;
}

export function PendingChannelsResponsePendingOpenChannelFromJSON(json: any): PendingChannelsResponsePendingOpenChannel {
    return PendingChannelsResponsePendingOpenChannelFromJSONTyped(json, false);
}

export function PendingChannelsResponsePendingOpenChannelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PendingChannelsResponsePendingOpenChannel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channel': !exists(json, 'channel') ? undefined : PendingChannelsResponsePendingChannelFromJSON(json['channel']),
        'confirmationHeight': !exists(json, 'confirmation_height') ? undefined : json['confirmation_height'],
        'commitFee': !exists(json, 'commit_fee') ? undefined : json['commit_fee'],
        'commitWeight': !exists(json, 'commit_weight') ? undefined : json['commit_weight'],
        'feePerKw': !exists(json, 'fee_per_kw') ? undefined : json['fee_per_kw'],
    };
}

export function PendingChannelsResponsePendingOpenChannelToJSON(value?: PendingChannelsResponsePendingOpenChannel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel': PendingChannelsResponsePendingChannelToJSON(value.channel),
        'confirmation_height': value.confirmationHeight,
        'commit_fee': value.commitFee,
        'commit_weight': value.commitWeight,
        'fee_per_kw': value.feePerKw,
    };
}

