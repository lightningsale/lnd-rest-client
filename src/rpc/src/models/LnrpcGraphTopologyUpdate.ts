/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelEdgeUpdate,
    LnrpcChannelEdgeUpdateFromJSON,
    LnrpcChannelEdgeUpdateFromJSONTyped,
    LnrpcChannelEdgeUpdateToJSON,
    LnrpcClosedChannelUpdate,
    LnrpcClosedChannelUpdateFromJSON,
    LnrpcClosedChannelUpdateFromJSONTyped,
    LnrpcClosedChannelUpdateToJSON,
    LnrpcNodeUpdate,
    LnrpcNodeUpdateFromJSON,
    LnrpcNodeUpdateFromJSONTyped,
    LnrpcNodeUpdateToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcGraphTopologyUpdate
 */
export interface LnrpcGraphTopologyUpdate {
    /**
     * 
     * @type {Array<LnrpcNodeUpdate>}
     * @memberof LnrpcGraphTopologyUpdate
     */
    nodeUpdates?: Array<LnrpcNodeUpdate>;
    /**
     * 
     * @type {Array<LnrpcChannelEdgeUpdate>}
     * @memberof LnrpcGraphTopologyUpdate
     */
    channelUpdates?: Array<LnrpcChannelEdgeUpdate>;
    /**
     * 
     * @type {Array<LnrpcClosedChannelUpdate>}
     * @memberof LnrpcGraphTopologyUpdate
     */
    closedChans?: Array<LnrpcClosedChannelUpdate>;
}

export function LnrpcGraphTopologyUpdateFromJSON(json: any): LnrpcGraphTopologyUpdate {
    return LnrpcGraphTopologyUpdateFromJSONTyped(json, false);
}

export function LnrpcGraphTopologyUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcGraphTopologyUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nodeUpdates': !exists(json, 'node_updates') ? undefined : ((json['node_updates'] as Array<any>).map(LnrpcNodeUpdateFromJSON)),
        'channelUpdates': !exists(json, 'channel_updates') ? undefined : ((json['channel_updates'] as Array<any>).map(LnrpcChannelEdgeUpdateFromJSON)),
        'closedChans': !exists(json, 'closed_chans') ? undefined : ((json['closed_chans'] as Array<any>).map(LnrpcClosedChannelUpdateFromJSON)),
    };
}

export function LnrpcGraphTopologyUpdateToJSON(value?: LnrpcGraphTopologyUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'node_updates': value.nodeUpdates === undefined ? undefined : ((value.nodeUpdates as Array<any>).map(LnrpcNodeUpdateToJSON)),
        'channel_updates': value.channelUpdates === undefined ? undefined : ((value.channelUpdates as Array<any>).map(LnrpcChannelEdgeUpdateToJSON)),
        'closed_chans': value.closedChans === undefined ? undefined : ((value.closedChans as Array<any>).map(LnrpcClosedChannelUpdateToJSON)),
    };
}

