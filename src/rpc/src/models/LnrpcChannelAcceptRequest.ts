/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LnrpcChannelAcceptRequest
 */
export interface LnrpcChannelAcceptRequest {
    /**
     * The pubkey of the node that wishes to open an inbound channel.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    nodePubkey?: string;
    /**
     * The hash of the genesis block that the proposed channel resides in.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    chainHash?: string;
    /**
     * The pending channel id.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    pendingChanId?: string;
    /**
     * The funding amount in satoshis that initiator wishes to use in the
     * channel.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    fundingAmt?: string;
    /**
     * The push amount of the proposed channel in millisatoshis.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    pushAmt?: string;
    /**
     * The dust limit of the initiator's commitment tx.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    dustLimit?: string;
    /**
     * The maximum amount of coins in millisatoshis that can be pending in this
     * channel.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    maxValueInFlight?: string;
    /**
     * The minimum amount of satoshis the initiator requires us to have at all
     * times.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    channelReserve?: string;
    /**
     * The smallest HTLC in millisatoshis that the initiator will accept.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    minHtlc?: string;
    /**
     * The initial fee rate that the initiator suggests for both commitment
     * transactions.
     * @type {string}
     * @memberof LnrpcChannelAcceptRequest
     */
    feePerKw?: string;
    /**
     * The number of blocks to use for the relative time lock in the pay-to-self
     * output of both commitment transactions.
     * @type {number}
     * @memberof LnrpcChannelAcceptRequest
     */
    csvDelay?: number;
    /**
     * The total number of incoming HTLC's that the initiator will accept.
     * @type {number}
     * @memberof LnrpcChannelAcceptRequest
     */
    maxAcceptedHtlcs?: number;
    /**
     * A bit-field which the initiator uses to specify proposed channel
     * behavior.
     * @type {number}
     * @memberof LnrpcChannelAcceptRequest
     */
    channelFlags?: number;
}

export function LnrpcChannelAcceptRequestFromJSON(json: any): LnrpcChannelAcceptRequest {
    return LnrpcChannelAcceptRequestFromJSONTyped(json, false);
}

export function LnrpcChannelAcceptRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannelAcceptRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nodePubkey': !exists(json, 'node_pubkey') ? undefined : json['node_pubkey'],
        'chainHash': !exists(json, 'chain_hash') ? undefined : json['chain_hash'],
        'pendingChanId': !exists(json, 'pending_chan_id') ? undefined : json['pending_chan_id'],
        'fundingAmt': !exists(json, 'funding_amt') ? undefined : json['funding_amt'],
        'pushAmt': !exists(json, 'push_amt') ? undefined : json['push_amt'],
        'dustLimit': !exists(json, 'dust_limit') ? undefined : json['dust_limit'],
        'maxValueInFlight': !exists(json, 'max_value_in_flight') ? undefined : json['max_value_in_flight'],
        'channelReserve': !exists(json, 'channel_reserve') ? undefined : json['channel_reserve'],
        'minHtlc': !exists(json, 'min_htlc') ? undefined : json['min_htlc'],
        'feePerKw': !exists(json, 'fee_per_kw') ? undefined : json['fee_per_kw'],
        'csvDelay': !exists(json, 'csv_delay') ? undefined : json['csv_delay'],
        'maxAcceptedHtlcs': !exists(json, 'max_accepted_htlcs') ? undefined : json['max_accepted_htlcs'],
        'channelFlags': !exists(json, 'channel_flags') ? undefined : json['channel_flags'],
    };
}

export function LnrpcChannelAcceptRequestToJSON(value?: LnrpcChannelAcceptRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'node_pubkey': value.nodePubkey,
        'chain_hash': value.chainHash,
        'pending_chan_id': value.pendingChanId,
        'funding_amt': value.fundingAmt,
        'push_amt': value.pushAmt,
        'dust_limit': value.dustLimit,
        'max_value_in_flight': value.maxValueInFlight,
        'channel_reserve': value.channelReserve,
        'min_htlc': value.minHtlc,
        'fee_per_kw': value.feePerKw,
        'csv_delay': value.csvDelay,
        'max_accepted_htlcs': value.maxAcceptedHtlcs,
        'channel_flags': value.channelFlags,
    };
}

