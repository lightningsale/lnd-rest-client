/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelPoint,
    LnrpcChannelPointFromJSON,
    LnrpcChannelPointFromJSONTyped,
    LnrpcChannelPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcPolicyUpdateRequest
 */
export interface LnrpcPolicyUpdateRequest {
    /**
     * If set, then this update applies to all currently active channels.
     * @type {boolean}
     * @memberof LnrpcPolicyUpdateRequest
     */
    global?: boolean;
    /**
     * 
     * @type {LnrpcChannelPoint}
     * @memberof LnrpcPolicyUpdateRequest
     */
    chanPoint?: LnrpcChannelPoint;
    /**
     * The base fee charged regardless of the number of milli-satoshis sent.
     * @type {string}
     * @memberof LnrpcPolicyUpdateRequest
     */
    baseFeeMsat?: string;
    /**
     * The effective fee rate in milli-satoshis. The precision of this value
     * goes up to 6 decimal places, so 1e-6.
     * @type {number}
     * @memberof LnrpcPolicyUpdateRequest
     */
    feeRate?: number;
    /**
     * The required timelock delta for HTLCs forwarded over the channel.
     * @type {number}
     * @memberof LnrpcPolicyUpdateRequest
     */
    timeLockDelta?: number;
    /**
     * If set, the maximum HTLC size in milli-satoshis. If unset, the maximum
     * HTLC will be unchanged.
     * @type {string}
     * @memberof LnrpcPolicyUpdateRequest
     */
    maxHtlcMsat?: string;
    /**
     * The minimum HTLC size in milli-satoshis. Only applied if
     * min_htlc_msat_specified is true.
     * @type {string}
     * @memberof LnrpcPolicyUpdateRequest
     */
    minHtlcMsat?: string;
    /**
     * If true, min_htlc_msat is applied.
     * @type {boolean}
     * @memberof LnrpcPolicyUpdateRequest
     */
    minHtlcMsatSpecified?: boolean;
}

export function LnrpcPolicyUpdateRequestFromJSON(json: any): LnrpcPolicyUpdateRequest {
    return LnrpcPolicyUpdateRequestFromJSONTyped(json, false);
}

export function LnrpcPolicyUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcPolicyUpdateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'global': !exists(json, 'global') ? undefined : json['global'],
        'chanPoint': !exists(json, 'chan_point') ? undefined : LnrpcChannelPointFromJSON(json['chan_point']),
        'baseFeeMsat': !exists(json, 'base_fee_msat') ? undefined : json['base_fee_msat'],
        'feeRate': !exists(json, 'fee_rate') ? undefined : json['fee_rate'],
        'timeLockDelta': !exists(json, 'time_lock_delta') ? undefined : json['time_lock_delta'],
        'maxHtlcMsat': !exists(json, 'max_htlc_msat') ? undefined : json['max_htlc_msat'],
        'minHtlcMsat': !exists(json, 'min_htlc_msat') ? undefined : json['min_htlc_msat'],
        'minHtlcMsatSpecified': !exists(json, 'min_htlc_msat_specified') ? undefined : json['min_htlc_msat_specified'],
    };
}

export function LnrpcPolicyUpdateRequestToJSON(value?: LnrpcPolicyUpdateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'global': value.global,
        'chan_point': LnrpcChannelPointToJSON(value.chanPoint),
        'base_fee_msat': value.baseFeeMsat,
        'fee_rate': value.feeRate,
        'time_lock_delta': value.timeLockDelta,
        'max_htlc_msat': value.maxHtlcMsat,
        'min_htlc_msat': value.minHtlcMsat,
        'min_htlc_msat_specified': value.minHtlcMsatSpecified,
    };
}

