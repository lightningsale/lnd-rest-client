/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LnrpcChannelUpdate
 */
export interface LnrpcChannelUpdate {
    /**
     * The signature that validates the announced data and proves the ownership
     * of node id.
     * @type {string}
     * @memberof LnrpcChannelUpdate
     */
    signature?: string;
    /**
     * The target chain that this channel was opened within. This value
     * should be the genesis hash of the target chain. Along with the short
     * channel ID, this uniquely identifies the channel globally in a
     * blockchain.
     * @type {string}
     * @memberof LnrpcChannelUpdate
     */
    chainHash?: string;
    /**
     * The unique description of the funding transaction.
     * @type {string}
     * @memberof LnrpcChannelUpdate
     */
    chanId?: string;
    /**
     * A timestamp that allows ordering in the case of multiple announcements.
     * We should ignore the message if timestamp is not greater than the
     * last-received.
     * @type {number}
     * @memberof LnrpcChannelUpdate
     */
    timestamp?: number;
    /**
     * The bitfield that describes whether optional fields are present in this
     * update. Currently, the least-significant bit must be set to 1 if the
     * optional field MaxHtlc is present.
     * @type {number}
     * @memberof LnrpcChannelUpdate
     */
    messageFlags?: number;
    /**
     * The bitfield that describes additional meta-data concerning how the
     * update is to be interpreted. Currently, the least-significant bit must be
     * set to 0 if the creating node corresponds to the first node in the
     * previously sent channel announcement and 1 otherwise. If the second bit
     * is set, then the channel is set to be disabled.
     * @type {number}
     * @memberof LnrpcChannelUpdate
     */
    channelFlags?: number;
    /**
     * The minimum number of blocks this node requires to be added to the expiry
     * of HTLCs. This is a security parameter determined by the node operator.
     * This value represents the required gap between the time locks of the
     * incoming and outgoing HTLC's set to this node.
     * @type {number}
     * @memberof LnrpcChannelUpdate
     */
    timeLockDelta?: number;
    /**
     * The minimum HTLC value which will be accepted.
     * @type {string}
     * @memberof LnrpcChannelUpdate
     */
    htlcMinimumMsat?: string;
    /**
     * The base fee that must be used for incoming HTLC's to this particular
     * channel. This value will be tacked onto the required for a payment
     * independent of the size of the payment.
     * @type {number}
     * @memberof LnrpcChannelUpdate
     */
    baseFee?: number;
    /**
     * The fee rate that will be charged per millionth of a satoshi.
     * @type {number}
     * @memberof LnrpcChannelUpdate
     */
    feeRate?: number;
    /**
     * The maximum HTLC value which will be accepted.
     * @type {string}
     * @memberof LnrpcChannelUpdate
     */
    htlcMaximumMsat?: string;
    /**
     * The set of data that was appended to this message, some of which we may
     * not actually know how to iterate or parse. By holding onto this data, we
     * ensure that we're able to properly validate the set of signatures that
     * cover these new fields, and ensure we're able to make upgrades to the
     * network in a forwards compatible manner.
     * @type {string}
     * @memberof LnrpcChannelUpdate
     */
    extraOpaqueData?: string;
}

export function LnrpcChannelUpdateFromJSON(json: any): LnrpcChannelUpdate {
    return LnrpcChannelUpdateFromJSONTyped(json, false);
}

export function LnrpcChannelUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannelUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
        'chainHash': !exists(json, 'chain_hash') ? undefined : json['chain_hash'],
        'chanId': !exists(json, 'chan_id') ? undefined : json['chan_id'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
        'messageFlags': !exists(json, 'message_flags') ? undefined : json['message_flags'],
        'channelFlags': !exists(json, 'channel_flags') ? undefined : json['channel_flags'],
        'timeLockDelta': !exists(json, 'time_lock_delta') ? undefined : json['time_lock_delta'],
        'htlcMinimumMsat': !exists(json, 'htlc_minimum_msat') ? undefined : json['htlc_minimum_msat'],
        'baseFee': !exists(json, 'base_fee') ? undefined : json['base_fee'],
        'feeRate': !exists(json, 'fee_rate') ? undefined : json['fee_rate'],
        'htlcMaximumMsat': !exists(json, 'htlc_maximum_msat') ? undefined : json['htlc_maximum_msat'],
        'extraOpaqueData': !exists(json, 'extra_opaque_data') ? undefined : json['extra_opaque_data'],
    };
}

export function LnrpcChannelUpdateToJSON(value?: LnrpcChannelUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'signature': value.signature,
        'chain_hash': value.chainHash,
        'chan_id': value.chanId,
        'timestamp': value.timestamp,
        'message_flags': value.messageFlags,
        'channel_flags': value.channelFlags,
        'time_lock_delta': value.timeLockDelta,
        'htlc_minimum_msat': value.htlcMinimumMsat,
        'base_fee': value.baseFee,
        'fee_rate': value.feeRate,
        'htlc_maximum_msat': value.htlcMaximumMsat,
        'extra_opaque_data': value.extraOpaqueData,
    };
}

