/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelEdge,
    LnrpcChannelEdgeFromJSON,
    LnrpcChannelEdgeFromJSONTyped,
    LnrpcChannelEdgeToJSON,
    LnrpcLightningNode,
    LnrpcLightningNodeFromJSON,
    LnrpcLightningNodeFromJSONTyped,
    LnrpcLightningNodeToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcNodeInfo
 */
export interface LnrpcNodeInfo {
    /**
     * 
     * @type {LnrpcLightningNode}
     * @memberof LnrpcNodeInfo
     */
    node?: LnrpcLightningNode;
    /**
     * The total number of channels for the node.
     * @type {number}
     * @memberof LnrpcNodeInfo
     */
    numChannels?: number;
    /**
     * The sum of all channels capacity for the node, denominated in satoshis.
     * @type {string}
     * @memberof LnrpcNodeInfo
     */
    totalCapacity?: string;
    /**
     * A list of all public channels for the node.
     * @type {Array<LnrpcChannelEdge>}
     * @memberof LnrpcNodeInfo
     */
    channels?: Array<LnrpcChannelEdge>;
}

export function LnrpcNodeInfoFromJSON(json: any): LnrpcNodeInfo {
    return LnrpcNodeInfoFromJSONTyped(json, false);
}

export function LnrpcNodeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcNodeInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'node': !exists(json, 'node') ? undefined : LnrpcLightningNodeFromJSON(json['node']),
        'numChannels': !exists(json, 'num_channels') ? undefined : json['num_channels'],
        'totalCapacity': !exists(json, 'total_capacity') ? undefined : json['total_capacity'],
        'channels': !exists(json, 'channels') ? undefined : ((json['channels'] as Array<any>).map(LnrpcChannelEdgeFromJSON)),
    };
}

export function LnrpcNodeInfoToJSON(value?: LnrpcNodeInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'node': LnrpcLightningNodeToJSON(value.node),
        'num_channels': value.numChannels,
        'total_capacity': value.totalCapacity,
        'channels': value.channels === undefined ? undefined : ((value.channels as Array<any>).map(LnrpcChannelEdgeToJSON)),
    };
}

