/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChannelCloseSummaryClosureType,
    ChannelCloseSummaryClosureTypeFromJSON,
    ChannelCloseSummaryClosureTypeFromJSONTyped,
    ChannelCloseSummaryClosureTypeToJSON,
    LnrpcInitiator,
    LnrpcInitiatorFromJSON,
    LnrpcInitiatorFromJSONTyped,
    LnrpcInitiatorToJSON,
    LnrpcResolution,
    LnrpcResolutionFromJSON,
    LnrpcResolutionFromJSONTyped,
    LnrpcResolutionToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcChannelCloseSummary
 */
export interface LnrpcChannelCloseSummary {
    /**
     * The outpoint (txid:index) of the funding transaction.
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    channelPoint?: string;
    /**
     * The unique channel ID for the channel.
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    chanId?: string;
    /**
     * The hash of the genesis block that this channel resides within.
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    chainHash?: string;
    /**
     * The txid of the transaction which ultimately closed this channel.
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    closingTxHash?: string;
    /**
     * Public key of the remote peer that we formerly had a channel with.
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    remotePubkey?: string;
    /**
     * Total capacity of the channel.
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    capacity?: string;
    /**
     * Height at which the funding transaction was spent.
     * @type {number}
     * @memberof LnrpcChannelCloseSummary
     */
    closeHeight?: number;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    settledBalance?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcChannelCloseSummary
     */
    timeLockedBalance?: string;
    /**
     * 
     * @type {ChannelCloseSummaryClosureType}
     * @memberof LnrpcChannelCloseSummary
     */
    closeType?: ChannelCloseSummaryClosureType;
    /**
     * 
     * @type {LnrpcInitiator}
     * @memberof LnrpcChannelCloseSummary
     */
    openInitiator?: LnrpcInitiator;
    /**
     * 
     * @type {LnrpcInitiator}
     * @memberof LnrpcChannelCloseSummary
     */
    closeInitiator?: LnrpcInitiator;
    /**
     * 
     * @type {Array<LnrpcResolution>}
     * @memberof LnrpcChannelCloseSummary
     */
    resolutions?: Array<LnrpcResolution>;
}

export function LnrpcChannelCloseSummaryFromJSON(json: any): LnrpcChannelCloseSummary {
    return LnrpcChannelCloseSummaryFromJSONTyped(json, false);
}

export function LnrpcChannelCloseSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChannelCloseSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelPoint': !exists(json, 'channel_point') ? undefined : json['channel_point'],
        'chanId': !exists(json, 'chan_id') ? undefined : json['chan_id'],
        'chainHash': !exists(json, 'chain_hash') ? undefined : json['chain_hash'],
        'closingTxHash': !exists(json, 'closing_tx_hash') ? undefined : json['closing_tx_hash'],
        'remotePubkey': !exists(json, 'remote_pubkey') ? undefined : json['remote_pubkey'],
        'capacity': !exists(json, 'capacity') ? undefined : json['capacity'],
        'closeHeight': !exists(json, 'close_height') ? undefined : json['close_height'],
        'settledBalance': !exists(json, 'settled_balance') ? undefined : json['settled_balance'],
        'timeLockedBalance': !exists(json, 'time_locked_balance') ? undefined : json['time_locked_balance'],
        'closeType': !exists(json, 'close_type') ? undefined : ChannelCloseSummaryClosureTypeFromJSON(json['close_type']),
        'openInitiator': !exists(json, 'open_initiator') ? undefined : LnrpcInitiatorFromJSON(json['open_initiator']),
        'closeInitiator': !exists(json, 'close_initiator') ? undefined : LnrpcInitiatorFromJSON(json['close_initiator']),
        'resolutions': !exists(json, 'resolutions') ? undefined : ((json['resolutions'] as Array<any>).map(LnrpcResolutionFromJSON)),
    };
}

export function LnrpcChannelCloseSummaryToJSON(value?: LnrpcChannelCloseSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel_point': value.channelPoint,
        'chan_id': value.chanId,
        'chain_hash': value.chainHash,
        'closing_tx_hash': value.closingTxHash,
        'remote_pubkey': value.remotePubkey,
        'capacity': value.capacity,
        'close_height': value.closeHeight,
        'settled_balance': value.settledBalance,
        'time_locked_balance': value.timeLockedBalance,
        'close_type': ChannelCloseSummaryClosureTypeToJSON(value.closeType),
        'open_initiator': LnrpcInitiatorToJSON(value.openInitiator),
        'close_initiator': LnrpcInitiatorToJSON(value.closeInitiator),
        'resolutions': value.resolutions === undefined ? undefined : ((value.resolutions as Array<any>).map(LnrpcResolutionToJSON)),
    };
}

