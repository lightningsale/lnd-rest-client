/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InvoiceInvoiceState,
    InvoiceInvoiceStateFromJSON,
    InvoiceInvoiceStateFromJSONTyped,
    InvoiceInvoiceStateToJSON,
    LnrpcFeature,
    LnrpcFeatureFromJSON,
    LnrpcFeatureFromJSONTyped,
    LnrpcFeatureToJSON,
    LnrpcInvoiceHTLC,
    LnrpcInvoiceHTLCFromJSON,
    LnrpcInvoiceHTLCFromJSONTyped,
    LnrpcInvoiceHTLCToJSON,
    LnrpcRouteHint,
    LnrpcRouteHintFromJSON,
    LnrpcRouteHintFromJSONTyped,
    LnrpcRouteHintToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcInvoice
 */
export interface LnrpcInvoice {
    /**
     * An optional memo to attach along with the invoice. Used for record keeping
     * purposes for the invoice's creator, and will also be set in the description
     * field of the encoded payment request if the description_hash field is not
     * being used.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    memo?: string;
    /**
     * The hex-encoded preimage (32 byte) which will allow settling an incoming
     * HTLC payable to this preimage. When using REST, this field must be encoded
     * as base64.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    rPreimage?: string;
    /**
     * The hash of the preimage. When using REST, this field must be encoded as
     * base64.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    rHash?: string;
    /**
     * The fields value and value_msat are mutually exclusive.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    value?: string;
    /**
     * The fields value and value_msat are mutually exclusive.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    valueMsat?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LnrpcInvoice
     */
    settled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LnrpcInvoice
     */
    creationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcInvoice
     */
    settleDate?: string;
    /**
     * A bare-bones invoice for a payment within the Lightning Network. With the
     * details of the invoice, the sender has all the data necessary to send a
     * payment to the recipient.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    paymentRequest?: string;
    /**
     * Hash (SHA-256) of a description of the payment. Used if the description of
     * payment (memo) is too long to naturally fit within the description field
     * of an encoded payment request. When using REST, this field must be encoded
     * as base64.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    descriptionHash?: string;
    /**
     * Payment request expiry time in seconds. Default is 3600 (1 hour).
     * @type {string}
     * @memberof LnrpcInvoice
     */
    expiry?: string;
    /**
     * Fallback on-chain address.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    fallbackAddr?: string;
    /**
     * Delta to use for the time-lock of the CLTV extended to the final hop.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    cltvExpiry?: string;
    /**
     * Route hints that can each be individually used to assist in reaching the
     * invoice's destination.
     * @type {Array<LnrpcRouteHint>}
     * @memberof LnrpcInvoice
     */
    routeHints?: Array<LnrpcRouteHint>;
    /**
     * Whether this invoice should include routing hints for private channels.
     * @type {boolean}
     * @memberof LnrpcInvoice
     */
    _private?: boolean;
    /**
     * The "add" index of this invoice. Each newly created invoice will increment
     * this index making it monotonically increasing. Callers to the
     * SubscribeInvoices call can use this to instantly get notified of all added
     * invoices with an add_index greater than this one.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    addIndex?: string;
    /**
     * The "settle" index of this invoice. Each newly settled invoice will
     * increment this index making it monotonically increasing. Callers to the
     * SubscribeInvoices call can use this to instantly get notified of all
     * settled invoices with an settle_index greater than this one.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    settleIndex?: string;
    /**
     * Deprecated, use amt_paid_sat or amt_paid_msat.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    amtPaid?: string;
    /**
     * The amount that was accepted for this invoice, in satoshis. This will ONLY
     * be set if this invoice has been settled. We provide this field as if the
     * invoice was created with a zero value, then we need to record what amount
     * was ultimately accepted. Additionally, it's possible that the sender paid
     * MORE that was specified in the original invoice. So we'll record that here
     * as well.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    amtPaidSat?: string;
    /**
     * The amount that was accepted for this invoice, in millisatoshis. This will
     * ONLY be set if this invoice has been settled. We provide this field as if
     * the invoice was created with a zero value, then we need to record what
     * amount was ultimately accepted. Additionally, it's possible that the sender
     * paid MORE that was specified in the original invoice. So we'll record that
     * here as well.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    amtPaidMsat?: string;
    /**
     * 
     * @type {InvoiceInvoiceState}
     * @memberof LnrpcInvoice
     */
    state?: InvoiceInvoiceState;
    /**
     * List of HTLCs paying to this invoice [EXPERIMENTAL].
     * @type {Array<LnrpcInvoiceHTLC>}
     * @memberof LnrpcInvoice
     */
    htlcs?: Array<LnrpcInvoiceHTLC>;
    /**
     * List of features advertised on the invoice.
     * @type {{ [key: string]: LnrpcFeature; }}
     * @memberof LnrpcInvoice
     */
    features?: { [key: string]: LnrpcFeature; };
    /**
     * Indicates if this invoice was a spontaneous payment that arrived via keysend
     * [EXPERIMENTAL].
     * @type {boolean}
     * @memberof LnrpcInvoice
     */
    isKeysend?: boolean;
    /**
     * The payment address of this invoice. This value will be used in MPP
     * payments, and also for newer invoies that always require the MPP paylaod
     * for added end-to-end security.
     * @type {string}
     * @memberof LnrpcInvoice
     */
    paymentAddr?: string;
    /**
     * Signals whether or not this is an AMP invoice.
     * @type {boolean}
     * @memberof LnrpcInvoice
     */
    isAmp?: boolean;
}

export function LnrpcInvoiceFromJSON(json: any): LnrpcInvoice {
    return LnrpcInvoiceFromJSONTyped(json, false);
}

export function LnrpcInvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcInvoice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'rPreimage': !exists(json, 'r_preimage') ? undefined : json['r_preimage'],
        'rHash': !exists(json, 'r_hash') ? undefined : json['r_hash'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'valueMsat': !exists(json, 'value_msat') ? undefined : json['value_msat'],
        'settled': !exists(json, 'settled') ? undefined : json['settled'],
        'creationDate': !exists(json, 'creation_date') ? undefined : json['creation_date'],
        'settleDate': !exists(json, 'settle_date') ? undefined : json['settle_date'],
        'paymentRequest': !exists(json, 'payment_request') ? undefined : json['payment_request'],
        'descriptionHash': !exists(json, 'description_hash') ? undefined : json['description_hash'],
        'expiry': !exists(json, 'expiry') ? undefined : json['expiry'],
        'fallbackAddr': !exists(json, 'fallback_addr') ? undefined : json['fallback_addr'],
        'cltvExpiry': !exists(json, 'cltv_expiry') ? undefined : json['cltv_expiry'],
        'routeHints': !exists(json, 'route_hints') ? undefined : ((json['route_hints'] as Array<any>).map(LnrpcRouteHintFromJSON)),
        '_private': !exists(json, 'private') ? undefined : json['private'],
        'addIndex': !exists(json, 'add_index') ? undefined : json['add_index'],
        'settleIndex': !exists(json, 'settle_index') ? undefined : json['settle_index'],
        'amtPaid': !exists(json, 'amt_paid') ? undefined : json['amt_paid'],
        'amtPaidSat': !exists(json, 'amt_paid_sat') ? undefined : json['amt_paid_sat'],
        'amtPaidMsat': !exists(json, 'amt_paid_msat') ? undefined : json['amt_paid_msat'],
        'state': !exists(json, 'state') ? undefined : InvoiceInvoiceStateFromJSON(json['state']),
        'htlcs': !exists(json, 'htlcs') ? undefined : ((json['htlcs'] as Array<any>).map(LnrpcInvoiceHTLCFromJSON)),
        'features': !exists(json, 'features') ? undefined : (mapValues(json['features'], LnrpcFeatureFromJSON)),
        'isKeysend': !exists(json, 'is_keysend') ? undefined : json['is_keysend'],
        'paymentAddr': !exists(json, 'payment_addr') ? undefined : json['payment_addr'],
        'isAmp': !exists(json, 'is_amp') ? undefined : json['is_amp'],
    };
}

export function LnrpcInvoiceToJSON(value?: LnrpcInvoice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'memo': value.memo,
        'r_preimage': value.rPreimage,
        'r_hash': value.rHash,
        'value': value.value,
        'value_msat': value.valueMsat,
        'settled': value.settled,
        'creation_date': value.creationDate,
        'settle_date': value.settleDate,
        'payment_request': value.paymentRequest,
        'description_hash': value.descriptionHash,
        'expiry': value.expiry,
        'fallback_addr': value.fallbackAddr,
        'cltv_expiry': value.cltvExpiry,
        'route_hints': value.routeHints === undefined ? undefined : ((value.routeHints as Array<any>).map(LnrpcRouteHintToJSON)),
        'private': value._private,
        'add_index': value.addIndex,
        'settle_index': value.settleIndex,
        'amt_paid': value.amtPaid,
        'amt_paid_sat': value.amtPaidSat,
        'amt_paid_msat': value.amtPaidMsat,
        'state': InvoiceInvoiceStateToJSON(value.state),
        'htlcs': value.htlcs === undefined ? undefined : ((value.htlcs as Array<any>).map(LnrpcInvoiceHTLCToJSON)),
        'features': value.features === undefined ? undefined : (mapValues(value.features, LnrpcFeatureToJSON)),
        'is_keysend': value.isKeysend,
        'payment_addr': value.paymentAddr,
        'is_amp': value.isAmp,
    };
}

