/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChain,
    LnrpcChainFromJSON,
    LnrpcChainFromJSONTyped,
    LnrpcChainToJSON,
    LnrpcFeature,
    LnrpcFeatureFromJSON,
    LnrpcFeatureFromJSONTyped,
    LnrpcFeatureToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcGetInfoResponse
 */
export interface LnrpcGetInfoResponse {
    /**
     * The version of the LND software that the node is running.
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    version?: string;
    /**
     * The SHA1 commit hash that the daemon is compiled with.
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    commitHash?: string;
    /**
     * The identity pubkey of the current node.
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    identityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof LnrpcGetInfoResponse
     */
    numPendingChannels?: number;
    /**
     * 
     * @type {number}
     * @memberof LnrpcGetInfoResponse
     */
    numActiveChannels?: number;
    /**
     * 
     * @type {number}
     * @memberof LnrpcGetInfoResponse
     */
    numInactiveChannels?: number;
    /**
     * 
     * @type {number}
     * @memberof LnrpcGetInfoResponse
     */
    numPeers?: number;
    /**
     * 
     * @type {number}
     * @memberof LnrpcGetInfoResponse
     */
    blockHeight?: number;
    /**
     * 
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    blockHash?: string;
    /**
     * 
     * @type {string}
     * @memberof LnrpcGetInfoResponse
     */
    bestHeaderTimestamp?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LnrpcGetInfoResponse
     */
    syncedToChain?: boolean;
    /**
     * Whether we consider ourselves synced with the public channel graph.
     * @type {boolean}
     * @memberof LnrpcGetInfoResponse
     */
    syncedToGraph?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LnrpcGetInfoResponse
     */
    testnet?: boolean;
    /**
     * 
     * @type {Array<LnrpcChain>}
     * @memberof LnrpcGetInfoResponse
     */
    chains?: Array<LnrpcChain>;
    /**
     * The URIs of the current node.
     * @type {Array<string>}
     * @memberof LnrpcGetInfoResponse
     */
    uris?: Array<string>;
    /**
     * Features that our node has advertised in our init message, node
     * announcements and invoices.
     * @type {{ [key: string]: LnrpcFeature; }}
     * @memberof LnrpcGetInfoResponse
     */
    features?: { [key: string]: LnrpcFeature; };
}

export function LnrpcGetInfoResponseFromJSON(json: any): LnrpcGetInfoResponse {
    return LnrpcGetInfoResponseFromJSONTyped(json, false);
}

export function LnrpcGetInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcGetInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': !exists(json, 'version') ? undefined : json['version'],
        'commitHash': !exists(json, 'commit_hash') ? undefined : json['commit_hash'],
        'identityPubkey': !exists(json, 'identity_pubkey') ? undefined : json['identity_pubkey'],
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'numPendingChannels': !exists(json, 'num_pending_channels') ? undefined : json['num_pending_channels'],
        'numActiveChannels': !exists(json, 'num_active_channels') ? undefined : json['num_active_channels'],
        'numInactiveChannels': !exists(json, 'num_inactive_channels') ? undefined : json['num_inactive_channels'],
        'numPeers': !exists(json, 'num_peers') ? undefined : json['num_peers'],
        'blockHeight': !exists(json, 'block_height') ? undefined : json['block_height'],
        'blockHash': !exists(json, 'block_hash') ? undefined : json['block_hash'],
        'bestHeaderTimestamp': !exists(json, 'best_header_timestamp') ? undefined : json['best_header_timestamp'],
        'syncedToChain': !exists(json, 'synced_to_chain') ? undefined : json['synced_to_chain'],
        'syncedToGraph': !exists(json, 'synced_to_graph') ? undefined : json['synced_to_graph'],
        'testnet': !exists(json, 'testnet') ? undefined : json['testnet'],
        'chains': !exists(json, 'chains') ? undefined : ((json['chains'] as Array<any>).map(LnrpcChainFromJSON)),
        'uris': !exists(json, 'uris') ? undefined : json['uris'],
        'features': !exists(json, 'features') ? undefined : (mapValues(json['features'], LnrpcFeatureFromJSON)),
    };
}

export function LnrpcGetInfoResponseToJSON(value?: LnrpcGetInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'commit_hash': value.commitHash,
        'identity_pubkey': value.identityPubkey,
        'alias': value.alias,
        'color': value.color,
        'num_pending_channels': value.numPendingChannels,
        'num_active_channels': value.numActiveChannels,
        'num_inactive_channels': value.numInactiveChannels,
        'num_peers': value.numPeers,
        'block_height': value.blockHeight,
        'block_hash': value.blockHash,
        'best_header_timestamp': value.bestHeaderTimestamp,
        'synced_to_chain': value.syncedToChain,
        'synced_to_graph': value.syncedToGraph,
        'testnet': value.testnet,
        'chains': value.chains === undefined ? undefined : ((value.chains as Array<any>).map(LnrpcChainToJSON)),
        'uris': value.uris,
        'features': value.features === undefined ? undefined : (mapValues(value.features, LnrpcFeatureToJSON)),
    };
}

