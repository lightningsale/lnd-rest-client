/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelPoint,
    LnrpcChannelPointFromJSON,
    LnrpcChannelPointFromJSONTyped,
    LnrpcChannelPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcMultiChanBackup
 */
export interface LnrpcMultiChanBackup {
    /**
     * Is the set of all channels that are included in this multi-channel backup.
     * @type {Array<LnrpcChannelPoint>}
     * @memberof LnrpcMultiChanBackup
     */
    chanPoints?: Array<LnrpcChannelPoint>;
    /**
     * A single encrypted blob containing all the static channel backups of the
     * channel listed above. This can be stored as a single file or blob, and
     * safely be replaced with any prior/future versions. When using REST, this
     * field must be encoded as base64.
     * @type {string}
     * @memberof LnrpcMultiChanBackup
     */
    multiChanBackup?: string;
}

export function LnrpcMultiChanBackupFromJSON(json: any): LnrpcMultiChanBackup {
    return LnrpcMultiChanBackupFromJSONTyped(json, false);
}

export function LnrpcMultiChanBackupFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcMultiChanBackup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chanPoints': !exists(json, 'chan_points') ? undefined : ((json['chan_points'] as Array<any>).map(LnrpcChannelPointFromJSON)),
        'multiChanBackup': !exists(json, 'multi_chan_backup') ? undefined : json['multi_chan_backup'],
    };
}

export function LnrpcMultiChanBackupToJSON(value?: LnrpcMultiChanBackup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chan_points': value.chanPoints === undefined ? undefined : ((value.chanPoints as Array<any>).map(LnrpcChannelPointToJSON)),
        'multi_chan_backup': value.multiChanBackup,
    };
}

