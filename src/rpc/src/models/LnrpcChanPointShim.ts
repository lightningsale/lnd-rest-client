/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcChannelPoint,
    LnrpcChannelPointFromJSON,
    LnrpcChannelPointFromJSONTyped,
    LnrpcChannelPointToJSON,
    LnrpcKeyDescriptor,
    LnrpcKeyDescriptorFromJSON,
    LnrpcKeyDescriptorFromJSONTyped,
    LnrpcKeyDescriptorToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcChanPointShim
 */
export interface LnrpcChanPointShim {
    /**
     * The size of the pre-crafted output to be used as the channel point for this
     * channel funding.
     * @type {string}
     * @memberof LnrpcChanPointShim
     */
    amt?: string;
    /**
     * 
     * @type {LnrpcChannelPoint}
     * @memberof LnrpcChanPointShim
     */
    chanPoint?: LnrpcChannelPoint;
    /**
     * 
     * @type {LnrpcKeyDescriptor}
     * @memberof LnrpcChanPointShim
     */
    localKey?: LnrpcKeyDescriptor;
    /**
     * The key of the remote party to use when creating the multi-sig output.
     * @type {string}
     * @memberof LnrpcChanPointShim
     */
    remoteKey?: string;
    /**
     * If non-zero, then this will be used as the pending channel ID on the wire
     * protocol to initate the funding request. This is an optional field, and
     * should only be set if the responder is already expecting a specific pending
     * channel ID.
     * @type {string}
     * @memberof LnrpcChanPointShim
     */
    pendingChanId?: string;
    /**
     * This uint32 indicates if this channel is to be considered 'frozen'. A frozen
     * channel does not allow a cooperative channel close by the initiator. The
     * thaw_height is the height that this restriction stops applying to the
     * channel. The height can be interpreted in two ways: as a relative height if
     * the value is less than 500,000, or as an absolute height otherwise.
     * @type {number}
     * @memberof LnrpcChanPointShim
     */
    thawHeight?: number;
}

export function LnrpcChanPointShimFromJSON(json: any): LnrpcChanPointShim {
    return LnrpcChanPointShimFromJSONTyped(json, false);
}

export function LnrpcChanPointShimFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcChanPointShim {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amt': !exists(json, 'amt') ? undefined : json['amt'],
        'chanPoint': !exists(json, 'chan_point') ? undefined : LnrpcChannelPointFromJSON(json['chan_point']),
        'localKey': !exists(json, 'local_key') ? undefined : LnrpcKeyDescriptorFromJSON(json['local_key']),
        'remoteKey': !exists(json, 'remote_key') ? undefined : json['remote_key'],
        'pendingChanId': !exists(json, 'pending_chan_id') ? undefined : json['pending_chan_id'],
        'thawHeight': !exists(json, 'thaw_height') ? undefined : json['thaw_height'],
    };
}

export function LnrpcChanPointShimToJSON(value?: LnrpcChanPointShim | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amt': value.amt,
        'chan_point': LnrpcChannelPointToJSON(value.chanPoint),
        'local_key': LnrpcKeyDescriptorToJSON(value.localKey),
        'remote_key': value.remoteKey,
        'pending_chan_id': value.pendingChanId,
        'thaw_height': value.thawHeight,
    };
}

