/* tslint:disable */
/* eslint-disable */
/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LnrpcOutPoint,
    LnrpcOutPointFromJSON,
    LnrpcOutPointFromJSONTyped,
    LnrpcOutPointToJSON,
    LnrpcResolutionOutcome,
    LnrpcResolutionOutcomeFromJSON,
    LnrpcResolutionOutcomeFromJSONTyped,
    LnrpcResolutionOutcomeToJSON,
    LnrpcResolutionType,
    LnrpcResolutionTypeFromJSON,
    LnrpcResolutionTypeFromJSONTyped,
    LnrpcResolutionTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface LnrpcResolution
 */
export interface LnrpcResolution {
    /**
     * 
     * @type {LnrpcResolutionType}
     * @memberof LnrpcResolution
     */
    resolutionType?: LnrpcResolutionType;
    /**
     * 
     * @type {LnrpcResolutionOutcome}
     * @memberof LnrpcResolution
     */
    outcome?: LnrpcResolutionOutcome;
    /**
     * 
     * @type {LnrpcOutPoint}
     * @memberof LnrpcResolution
     */
    outpoint?: LnrpcOutPoint;
    /**
     * The amount that was claimed by the resolution.
     * @type {string}
     * @memberof LnrpcResolution
     */
    amountSat?: string;
    /**
     * The hex-encoded transaction ID of the sweep transaction that spent the
     * output.
     * @type {string}
     * @memberof LnrpcResolution
     */
    sweepTxid?: string;
}

export function LnrpcResolutionFromJSON(json: any): LnrpcResolution {
    return LnrpcResolutionFromJSONTyped(json, false);
}

export function LnrpcResolutionFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnrpcResolution {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resolutionType': !exists(json, 'resolution_type') ? undefined : LnrpcResolutionTypeFromJSON(json['resolution_type']),
        'outcome': !exists(json, 'outcome') ? undefined : LnrpcResolutionOutcomeFromJSON(json['outcome']),
        'outpoint': !exists(json, 'outpoint') ? undefined : LnrpcOutPointFromJSON(json['outpoint']),
        'amountSat': !exists(json, 'amount_sat') ? undefined : json['amount_sat'],
        'sweepTxid': !exists(json, 'sweep_txid') ? undefined : json['sweep_txid'],
    };
}

export function LnrpcResolutionToJSON(value?: LnrpcResolution | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resolution_type': LnrpcResolutionTypeToJSON(value.resolutionType),
        'outcome': LnrpcResolutionOutcomeToJSON(value.outcome),
        'outpoint': LnrpcOutPointToJSON(value.outpoint),
        'amount_sat': value.amountSat,
        'sweep_txid': value.sweepTxid,
    };
}

