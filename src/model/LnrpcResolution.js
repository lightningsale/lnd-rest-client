/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LnrpcOutPoint from './LnrpcOutPoint';
import LnrpcResolutionOutcome from './LnrpcResolutionOutcome';
import LnrpcResolutionType from './LnrpcResolutionType';

/**
 * The LnrpcResolution model module.
 * @module model/LnrpcResolution
 * @version version not set
 */
class LnrpcResolution {
    /**
     * Constructs a new <code>LnrpcResolution</code>.
     * @alias module:model/LnrpcResolution
     */
    constructor() { 
        LnrpcResolution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcResolution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcResolution} obj Optional instance to populate.
     * @return {module:model/LnrpcResolution} The populated <code>LnrpcResolution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcResolution();

            if (data.hasOwnProperty('resolution_type')) {
                obj['resolution_type'] = LnrpcResolutionType.constructFromObject(data['resolution_type']);
            }
            if (data.hasOwnProperty('outcome')) {
                obj['outcome'] = LnrpcResolutionOutcome.constructFromObject(data['outcome']);
            }
            if (data.hasOwnProperty('outpoint')) {
                obj['outpoint'] = LnrpcOutPoint.constructFromObject(data['outpoint']);
            }
            if (data.hasOwnProperty('amount_sat')) {
                obj['amount_sat'] = ApiClient.convertToType(data['amount_sat'], 'String');
            }
            if (data.hasOwnProperty('sweep_txid')) {
                obj['sweep_txid'] = ApiClient.convertToType(data['sweep_txid'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/LnrpcResolutionType} resolution_type
 */
LnrpcResolution.prototype['resolution_type'] = undefined;

/**
 * @member {module:model/LnrpcResolutionOutcome} outcome
 */
LnrpcResolution.prototype['outcome'] = undefined;

/**
 * @member {module:model/LnrpcOutPoint} outpoint
 */
LnrpcResolution.prototype['outpoint'] = undefined;

/**
 * The amount that was claimed by the resolution.
 * @member {String} amount_sat
 */
LnrpcResolution.prototype['amount_sat'] = undefined;

/**
 * The hex-encoded transaction ID of the sweep transaction that spent the output.
 * @member {String} sweep_txid
 */
LnrpcResolution.prototype['sweep_txid'] = undefined;






export default LnrpcResolution;

