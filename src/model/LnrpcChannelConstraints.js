/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LnrpcChannelConstraints model module.
 * @module model/LnrpcChannelConstraints
 * @version version not set
 */
class LnrpcChannelConstraints {
    /**
     * Constructs a new <code>LnrpcChannelConstraints</code>.
     * @alias module:model/LnrpcChannelConstraints
     */
    constructor() { 
        LnrpcChannelConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcChannelConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcChannelConstraints} obj Optional instance to populate.
     * @return {module:model/LnrpcChannelConstraints} The populated <code>LnrpcChannelConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcChannelConstraints();

            if (data.hasOwnProperty('csv_delay')) {
                obj['csv_delay'] = ApiClient.convertToType(data['csv_delay'], 'Number');
            }
            if (data.hasOwnProperty('chan_reserve_sat')) {
                obj['chan_reserve_sat'] = ApiClient.convertToType(data['chan_reserve_sat'], 'String');
            }
            if (data.hasOwnProperty('dust_limit_sat')) {
                obj['dust_limit_sat'] = ApiClient.convertToType(data['dust_limit_sat'], 'String');
            }
            if (data.hasOwnProperty('max_pending_amt_msat')) {
                obj['max_pending_amt_msat'] = ApiClient.convertToType(data['max_pending_amt_msat'], 'String');
            }
            if (data.hasOwnProperty('min_htlc_msat')) {
                obj['min_htlc_msat'] = ApiClient.convertToType(data['min_htlc_msat'], 'String');
            }
            if (data.hasOwnProperty('max_accepted_htlcs')) {
                obj['max_accepted_htlcs'] = ApiClient.convertToType(data['max_accepted_htlcs'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The CSV delay expressed in relative blocks. If the channel is force closed, we will need to wait for this many blocks before we can regain our funds.
 * @member {Number} csv_delay
 */
LnrpcChannelConstraints.prototype['csv_delay'] = undefined;

/**
 * The minimum satoshis this node is required to reserve in its balance.
 * @member {String} chan_reserve_sat
 */
LnrpcChannelConstraints.prototype['chan_reserve_sat'] = undefined;

/**
 * The dust limit (in satoshis) of the initiator's commitment tx.
 * @member {String} dust_limit_sat
 */
LnrpcChannelConstraints.prototype['dust_limit_sat'] = undefined;

/**
 * The maximum amount of coins in millisatoshis that can be pending in this channel.
 * @member {String} max_pending_amt_msat
 */
LnrpcChannelConstraints.prototype['max_pending_amt_msat'] = undefined;

/**
 * The smallest HTLC in millisatoshis that the initiator will accept.
 * @member {String} min_htlc_msat
 */
LnrpcChannelConstraints.prototype['min_htlc_msat'] = undefined;

/**
 * The total number of incoming HTLC's that the initiator will accept.
 * @member {Number} max_accepted_htlcs
 */
LnrpcChannelConstraints.prototype['max_accepted_htlcs'] = undefined;






export default LnrpcChannelConstraints;

