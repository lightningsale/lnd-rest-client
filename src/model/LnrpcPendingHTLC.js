/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LnrpcPendingHTLC model module.
 * @module model/LnrpcPendingHTLC
 * @version version not set
 */
class LnrpcPendingHTLC {
    /**
     * Constructs a new <code>LnrpcPendingHTLC</code>.
     * @alias module:model/LnrpcPendingHTLC
     */
    constructor() { 
        LnrpcPendingHTLC.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcPendingHTLC</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcPendingHTLC} obj Optional instance to populate.
     * @return {module:model/LnrpcPendingHTLC} The populated <code>LnrpcPendingHTLC</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcPendingHTLC();

            if (data.hasOwnProperty('incoming')) {
                obj['incoming'] = ApiClient.convertToType(data['incoming'], 'Boolean');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('outpoint')) {
                obj['outpoint'] = ApiClient.convertToType(data['outpoint'], 'String');
            }
            if (data.hasOwnProperty('maturity_height')) {
                obj['maturity_height'] = ApiClient.convertToType(data['maturity_height'], 'Number');
            }
            if (data.hasOwnProperty('blocks_til_maturity')) {
                obj['blocks_til_maturity'] = ApiClient.convertToType(data['blocks_til_maturity'], 'Number');
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Boolean} incoming
 */
LnrpcPendingHTLC.prototype['incoming'] = undefined;

/**
 * @member {String} amount
 */
LnrpcPendingHTLC.prototype['amount'] = undefined;

/**
 * @member {String} outpoint
 */
LnrpcPendingHTLC.prototype['outpoint'] = undefined;

/**
 * @member {Number} maturity_height
 */
LnrpcPendingHTLC.prototype['maturity_height'] = undefined;

/**
 * The number of blocks remaining until the current stage can be swept. Negative values indicate how many blocks have passed since becoming mature.
 * @member {Number} blocks_til_maturity
 */
LnrpcPendingHTLC.prototype['blocks_til_maturity'] = undefined;

/**
 * @member {Number} stage
 */
LnrpcPendingHTLC.prototype['stage'] = undefined;






export default LnrpcPendingHTLC;

