/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HTLCAttemptHTLCStatus from './HTLCAttemptHTLCStatus';
import LnrpcFailure from './LnrpcFailure';
import LnrpcRoute from './LnrpcRoute';

/**
 * The LnrpcHTLCAttempt model module.
 * @module model/LnrpcHTLCAttempt
 * @version version not set
 */
class LnrpcHTLCAttempt {
    /**
     * Constructs a new <code>LnrpcHTLCAttempt</code>.
     * @alias module:model/LnrpcHTLCAttempt
     */
    constructor() { 
        LnrpcHTLCAttempt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcHTLCAttempt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcHTLCAttempt} obj Optional instance to populate.
     * @return {module:model/LnrpcHTLCAttempt} The populated <code>LnrpcHTLCAttempt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcHTLCAttempt();

            if (data.hasOwnProperty('attempt_id')) {
                obj['attempt_id'] = ApiClient.convertToType(data['attempt_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = HTLCAttemptHTLCStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = LnrpcRoute.constructFromObject(data['route']);
            }
            if (data.hasOwnProperty('attempt_time_ns')) {
                obj['attempt_time_ns'] = ApiClient.convertToType(data['attempt_time_ns'], 'String');
            }
            if (data.hasOwnProperty('resolve_time_ns')) {
                obj['resolve_time_ns'] = ApiClient.convertToType(data['resolve_time_ns'], 'String');
            }
            if (data.hasOwnProperty('failure')) {
                obj['failure'] = LnrpcFailure.constructFromObject(data['failure']);
            }
            if (data.hasOwnProperty('preimage')) {
                obj['preimage'] = ApiClient.convertToType(data['preimage'], 'Blob');
            }
        }
        return obj;
    }


}

/**
 * The unique ID that is used for this attempt.
 * @member {String} attempt_id
 */
LnrpcHTLCAttempt.prototype['attempt_id'] = undefined;

/**
 * @member {module:model/HTLCAttemptHTLCStatus} status
 */
LnrpcHTLCAttempt.prototype['status'] = undefined;

/**
 * @member {module:model/LnrpcRoute} route
 */
LnrpcHTLCAttempt.prototype['route'] = undefined;

/**
 * The time in UNIX nanoseconds at which this HTLC was sent.
 * @member {String} attempt_time_ns
 */
LnrpcHTLCAttempt.prototype['attempt_time_ns'] = undefined;

/**
 * The time in UNIX nanoseconds at which this HTLC was settled or failed. This value will not be set if the HTLC is still IN_FLIGHT.
 * @member {String} resolve_time_ns
 */
LnrpcHTLCAttempt.prototype['resolve_time_ns'] = undefined;

/**
 * @member {module:model/LnrpcFailure} failure
 */
LnrpcHTLCAttempt.prototype['failure'] = undefined;

/**
 * The preimage that was used to settle the HTLC.
 * @member {Blob} preimage
 */
LnrpcHTLCAttempt.prototype['preimage'] = undefined;






export default LnrpcHTLCAttempt;

