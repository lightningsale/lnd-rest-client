/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PendingChannelsResponseClosedChannel from './PendingChannelsResponseClosedChannel';
import PendingChannelsResponseForceClosedChannel from './PendingChannelsResponseForceClosedChannel';
import PendingChannelsResponsePendingOpenChannel from './PendingChannelsResponsePendingOpenChannel';
import PendingChannelsResponseWaitingCloseChannel from './PendingChannelsResponseWaitingCloseChannel';

/**
 * The LnrpcPendingChannelsResponse model module.
 * @module model/LnrpcPendingChannelsResponse
 * @version version not set
 */
class LnrpcPendingChannelsResponse {
    /**
     * Constructs a new <code>LnrpcPendingChannelsResponse</code>.
     * @alias module:model/LnrpcPendingChannelsResponse
     */
    constructor() { 
        LnrpcPendingChannelsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcPendingChannelsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcPendingChannelsResponse} obj Optional instance to populate.
     * @return {module:model/LnrpcPendingChannelsResponse} The populated <code>LnrpcPendingChannelsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcPendingChannelsResponse();

            if (data.hasOwnProperty('total_limbo_balance')) {
                obj['total_limbo_balance'] = ApiClient.convertToType(data['total_limbo_balance'], 'String');
            }
            if (data.hasOwnProperty('pending_open_channels')) {
                obj['pending_open_channels'] = ApiClient.convertToType(data['pending_open_channels'], [PendingChannelsResponsePendingOpenChannel]);
            }
            if (data.hasOwnProperty('pending_closing_channels')) {
                obj['pending_closing_channels'] = ApiClient.convertToType(data['pending_closing_channels'], [PendingChannelsResponseClosedChannel]);
            }
            if (data.hasOwnProperty('pending_force_closing_channels')) {
                obj['pending_force_closing_channels'] = ApiClient.convertToType(data['pending_force_closing_channels'], [PendingChannelsResponseForceClosedChannel]);
            }
            if (data.hasOwnProperty('waiting_close_channels')) {
                obj['waiting_close_channels'] = ApiClient.convertToType(data['waiting_close_channels'], [PendingChannelsResponseWaitingCloseChannel]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} total_limbo_balance
 */
LnrpcPendingChannelsResponse.prototype['total_limbo_balance'] = undefined;

/**
 * @member {Array.<module:model/PendingChannelsResponsePendingOpenChannel>} pending_open_channels
 */
LnrpcPendingChannelsResponse.prototype['pending_open_channels'] = undefined;

/**
 * Deprecated: Channels pending closing previously contained cooperatively closed channels with a single confirmation. These channels are now considered closed from the time we see them on chain.
 * @member {Array.<module:model/PendingChannelsResponseClosedChannel>} pending_closing_channels
 */
LnrpcPendingChannelsResponse.prototype['pending_closing_channels'] = undefined;

/**
 * @member {Array.<module:model/PendingChannelsResponseForceClosedChannel>} pending_force_closing_channels
 */
LnrpcPendingChannelsResponse.prototype['pending_force_closing_channels'] = undefined;

/**
 * @member {Array.<module:model/PendingChannelsResponseWaitingCloseChannel>} waiting_close_channels
 */
LnrpcPendingChannelsResponse.prototype['waiting_close_channels'] = undefined;






export default LnrpcPendingChannelsResponse;

