/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LnrpcFloatMetric from './LnrpcFloatMetric';

/**
 * The LnrpcNodeMetricsResponse model module.
 * @module model/LnrpcNodeMetricsResponse
 * @version version not set
 */
class LnrpcNodeMetricsResponse {
    /**
     * Constructs a new <code>LnrpcNodeMetricsResponse</code>.
     * @alias module:model/LnrpcNodeMetricsResponse
     */
    constructor() { 
        LnrpcNodeMetricsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcNodeMetricsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcNodeMetricsResponse} obj Optional instance to populate.
     * @return {module:model/LnrpcNodeMetricsResponse} The populated <code>LnrpcNodeMetricsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcNodeMetricsResponse();

            if (data.hasOwnProperty('betweenness_centrality')) {
                obj['betweenness_centrality'] = ApiClient.convertToType(data['betweenness_centrality'], {'String': LnrpcFloatMetric});
            }
        }
        return obj;
    }


}

/**
 * Betweenness centrality is the sum of the ratio of shortest paths that pass through the node for each pair of nodes in the graph (not counting paths starting or ending at this node). Map of node pubkey to betweenness centrality of the node. Normalized values are in the [0,1] closed interval.
 * @member {Object.<String, module:model/LnrpcFloatMetric>} betweenness_centrality
 */
LnrpcNodeMetricsResponse.prototype['betweenness_centrality'] = undefined;






export default LnrpcNodeMetricsResponse;

