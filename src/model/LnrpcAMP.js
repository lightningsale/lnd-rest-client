/**
 * rpc.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LnrpcAMP model module.
 * @module model/LnrpcAMP
 * @version version not set
 */
class LnrpcAMP {
    /**
     * Constructs a new <code>LnrpcAMP</code>.
     * Details specific to AMP HTLCs.
     * @alias module:model/LnrpcAMP
     */
    constructor() { 
        LnrpcAMP.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LnrpcAMP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LnrpcAMP} obj Optional instance to populate.
     * @return {module:model/LnrpcAMP} The populated <code>LnrpcAMP</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LnrpcAMP();

            if (data.hasOwnProperty('root_share')) {
                obj['root_share'] = ApiClient.convertToType(data['root_share'], 'Blob');
            }
            if (data.hasOwnProperty('set_id')) {
                obj['set_id'] = ApiClient.convertToType(data['set_id'], 'Blob');
            }
            if (data.hasOwnProperty('child_index')) {
                obj['child_index'] = ApiClient.convertToType(data['child_index'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Blob');
            }
            if (data.hasOwnProperty('preimage')) {
                obj['preimage'] = ApiClient.convertToType(data['preimage'], 'Blob');
            }
        }
        return obj;
    }


}

/**
 * An n-of-n secret share of the root seed from which child payment hashes and preimages are derived.
 * @member {Blob} root_share
 */
LnrpcAMP.prototype['root_share'] = undefined;

/**
 * An identifier for the HTLC set that this HTLC belongs to.
 * @member {Blob} set_id
 */
LnrpcAMP.prototype['set_id'] = undefined;

/**
 * A nonce used to randomize the child preimage and child hash from a given root_share.
 * @member {Number} child_index
 */
LnrpcAMP.prototype['child_index'] = undefined;

/**
 * The payment hash of the AMP HTLC.
 * @member {Blob} hash
 */
LnrpcAMP.prototype['hash'] = undefined;

/**
 * The preimage used to settle this AMP htlc. This field will only be populated if the invoice is in InvoiceState_ACCEPTED or InvoiceState_SETTLED.
 * @member {Blob} preimage
 */
LnrpcAMP.prototype['preimage'] = undefined;






export default LnrpcAMP;

